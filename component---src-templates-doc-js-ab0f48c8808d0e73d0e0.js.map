{"version":3,"sources":["webpack:///./src/templates/doc.js"],"names":["isActive","slug","IS_BROWSER","window","location","pathname","DocTemplate","data","menuItems","flattenListData","menu","size","weight","dir","map","item","Item","key","id","to","headings","length","value","dangerouslySetInnerHTML","__html","doc","html","amount","buttonPosition","buttonIcon"],"mappings":"4FAAA,iMAcMA,EAAW,SAAAC,GAAI,QACnBC,KAAaC,OAAOC,SAASC,WAAaJ,GAE7B,SAASK,EAAT,GAAgC,IAATC,EAAQ,EAARA,KAC9BC,EAAYC,YAAgBF,EAAM,QAExC,OACE,YAAC,IAAD,CACEG,KACE,YAAC,IAAD,KACE,YAAC,IAAD,CAAMC,KAAM,GAAIC,OAAQ,KAAxB,iBAIA,YAAC,IAAD,CAASC,IAAI,MAEZL,EAAUM,KAAI,SAAAC,GAAI,OACjB,YAAC,IAASC,KAAV,CACEC,IAAKF,EAAKG,GACVC,GAAIJ,EAAKd,KACTD,SAAUA,EAASe,EAAKd,OAEvBc,EAAKK,SAASC,OAAS,EACpBN,EAAKK,SAAS,GAAGE,MACjB,yBAMZ,YAAC,IAAD,MACA,mBAAKC,wBAAyB,CAAEC,OAAQjB,EAAKkB,IAAIC,QAEjD,YAAC,IAAD,CAASb,IAAI,IAAIc,OAAQ,KAEzB,YAAC,IAAD,MAEA,YAAC,IAAD,CAAQC,eAAe,eAAeC,WAAY,YAAC,IAAD,OAC/CrB,EAAUM,KAAI,SAAAC,GAAI,OACjB,YAAC,IAAOC,KAAR,CACEC,IAAKF,EAAKG,GACVC,GAAIJ,EAAKd,KACTD,SAAUA,EAASe,EAAKd,OAEvBc,EAAKK,SAASC,OAAS,EACpBN,EAAKK,SAAS,GAAGE,MACjB","file":"component---src-templates-doc-js-ab0f48c8808d0e73d0e0.js","sourcesContent":["import React from 'react';\nimport { graphql } from 'gatsby';\nimport { FiBookOpen } from 'react-icons/fi';\n\nimport { flattenListData } from '../utils';\nimport { IS_BROWSER } from '../constants';\nimport Page from '../components/Page';\nimport SEO from '../components/SEO';\nimport Text from '../components/Text';\nimport Spacing from '../components/Spacing';\nimport Sidemenu from '../components/Sidemenu';\nimport Drawer from '../components/Drawer';\nimport GitHubEditLink from '../components/GitHubEditLink';\n\nconst isActive = slug =>\n  IS_BROWSER ? window.location.pathname === slug : false;\n\nexport default function DocTemplate({ data }) {\n  const menuItems = flattenListData(data, 'menu');\n\n  return (\n    <Page\n      menu={\n        <Sidemenu>\n          <Text size={14} weight={200}>\n            DOCUMENTATION\n          </Text>\n\n          <Spacing dir=\"y\" />\n\n          {menuItems.map(item => (\n            <Sidemenu.Item\n              key={item.id}\n              to={item.slug}\n              isActive={isActive(item.slug)}\n            >\n              {item.headings.length > 0\n                ? item.headings[0].value\n                : 'Missing heading!'}\n            </Sidemenu.Item>\n          ))}\n        </Sidemenu>\n      }\n    >\n      <SEO />\n      <div dangerouslySetInnerHTML={{ __html: data.doc.html }} />\n\n      <Spacing dir=\"y\" amount={20} />\n      \n      <GitHubEditLink />\n\n      <Drawer buttonPosition=\"bottom-right\" buttonIcon={<FiBookOpen />}>\n        {menuItems.map(item => (\n          <Drawer.Item\n            key={item.id}\n            to={item.slug}\n            isActive={isActive(item.slug)}\n          >\n            {item.headings.length > 0\n              ? item.headings[0].value\n              : 'Missing heading!'}\n          </Drawer.Item>\n        ))}\n      </Drawer>\n    </Page>\n  );\n}\n\nexport const pageQuery = graphql`\n  query DocByID($id: String!) {\n    doc: markdownRemark(id: { eq: $id }) {\n      id\n      html\n    }\n\n    menu: allMarkdownRemark(\n      filter: {\n        fileAbsolutePath: { regex: \"/^((?!README).)*$/\" }\n        fields: { slug: { regex: \"/docs/\" } }\n      }\n      sort: { fields: [fields___slug], order: ASC }\n    ) {\n      edges {\n        node {\n          id\n          headings(depth: h2) {\n            value\n          }\n          fields {\n            slug\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}