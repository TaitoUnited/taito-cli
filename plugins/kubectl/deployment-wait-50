#!/bin/bash -e
# shellcheck source=lib/all.bash
. "${taito_plugin_path:?}/lib/all.bash"

echo "Checking application status"
kubectl::use_context

function check_status () {
  kubectl get pods -o custom-columns=READY:status.containerStatuses[*].ready,TERMINATED:status.containerStatuses[*].state.terminated.reason,NAME:metadata.name | grep "\-${taito_target_env}-" | grep -v 'Completed' | grep false &> /dev/null
}

# Wait until all containers have been deployed
while check_status || (sleep 2 && check_status); do
  echo "Waiting until all containers have been deployed"
  echo
  echo "TIP: If this takes a long time, perhaps you have forgotten to set value of some"
  echo "newly added secret? You can investigate more with 'taito status:${taito_target_env}',"
  echo "'taito logs:TARGET:${taito_target_env}', and 'taito open logs:${taito_target_env}' commands."
  echo
  kubectl get pods | grep "\-${taito_target_env}-"
  echo
  sleep 3
done

# Wait even longer in case of a temporary error
error_count=0
until [[ $error_count -ge 8 ]]; do
  pods=$(kubectl get pods | grep "\-${taito_target_env}-")
  if echo "${pods}" | grep "BackOff\|Error\|Init" &> /dev/null; then
    echo "Some errors during deployment:"
    echo
    echo "${pods}"
    echo
    echo "Waiting errors to resolve..."
    sleep 15
  else
    break
  fi
  ((error_count=error_count+1))
done

if kubectl get pods | grep "\-${taito_target_env}-" | grep "BackOff\|Error\|Init" &> /dev/null; then
  echo "ERROR: Some of the containers failed to start"
  echo
  kubectl get pods | grep "\-${taito_target_env}-"
  exit 1
fi

sleep 2

echo
kubectl get pods | grep "\-${taito_target_env}-"

taito::call_next "${@}"
