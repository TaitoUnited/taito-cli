#!/usr/bin/env bash
# NOTE: This bash script is run directly on host.

# TODO refactor: this is duplicate code with descriptions

cprefix="${1:-*}"

# Basic commands
echo "--help"
echo "readme"
echo "check"
echo "shell"
echo "trouble"
echo "upgrade"
echo "version"
echo "version --notes"
echo "-- COMMANDS"

# Workspace
echo "workspace clean"
echo "workspace kill"

# New project from template
echo "project create TEMPLATE BRANCH"
echo "project migrate TEMPLATE BRANCH"

# Passwords
echo "random string LENGTH"
echo "random words NUM_OF_WORDS"
echo "random uuid"
# TODO enable only when available
# echo "passwd share"
# echo "passwd list"
# echo "passwd list FILTER"
# echo "passwd get NAME"
# echo "passwd set NAME"
# echo "passwd rotate"
# echo "passwd rotate FILTER"

# Encryption
echo "hash generate FORMAT CONTENT"
echo "jwt decode TOKEN"

# Project management
echo "issue auth"
echo "issue add TITLE LABELS"
echo "issue state change TITLE STATE PERSON"
echo "issue comment add TITLE"
echo "issue open TITLE"
echo "issue list LANE"
echo "issue list LABEL"

# Hours
echo "hours auth"
echo "hours start"
echo "hours pause"
echo "hours stop"
echo "hours stop DESCRIPTION"
echo "hours add HOURS"
weekdays="today yesterday mon tue wed thu fri sat sun"
for weekday in ${weekdays}
do
  echo "hours add HOURS ${weekday}"
  echo "hours add HOURS ${weekday} DESCRIPTION"
done
echo "hours list"
echo "hours list all"
echo "hours show"
time_intervals="this-month last-month this-week last-week"
for time_interval in ${time_intervals}
do
  echo "hours show ${time_interval}"
done

# Zone management
echo "zone create TEMPLATE"
if [[ ${taito_type:-} == "zone" ]]; then
  echo "zone init"
  echo "zone apply"
  echo "zone status"
  echo "zone doctor"
  echo "zone maintenance"
  echo "zone destroy"
fi

# Global links
if [[ ${taito_type:-} == "zone" ]]; then
  global_links="${link_global_urls:-} ${link_urls:-}"
else
  global_links="${link_global_urls:-}"
fi
if [[ ${cprefix} == "open"* || "${cprefix}" == "*" ]]; then
  while IFS='*' read -ra items; do
    for item in "${items[@]}"; do
      words=(${item})
      link="${words[0]}"
      if [[ ${link} ]]; then
        prefix="$( cut -d '=' -f 1 <<< "$link" )";
        command=${prefix%#*}
        echo "open ${command}"
      fi
    done
  done <<< "${global_links:-}"
else
  echo "open"
fi

# Project
if [[ ${taito_project:-} ]]; then
  echo "env"
  echo "db add NAME"
  echo "project upgrade"

  # Version control commands
  echo "conventions"
  echo "env list"
  echo "env merge"
  echo "feat list"
  echo "feat rebase"
  echo "feat squash"
  echo "feat merge"
  echo "feat pr"
  echo "feat: FEATURE"
  echo "pull"
  echo "push"
  echo "stage"
  echo "unstage"
  echo "discard"
  echo "commit revert"
  echo "commit undo"
  echo "commit erase"
  echo "commit empty MESSAGE"
  echo "tag TAG"
  echo "untag TAG"
  if [[ ${cprefix} == "feat"* ]]; then
    features=$(git branch -a 2> /dev/null | \
      grep " feat/" | sed -e 's|feat/||')
    for feature in ${features}
    do
      echo "feat: ${feature}"
    done
  fi

  # Build target commands
  echo "build"
  for stack in ${taito_containers:-}; do
    echo "build:${stack}"
    echo "save:${stack}"
  done

  # Stack component commands
  for stack in ${taito_targets:-}
  do
    echo "clean:${stack}"
  done

  # Project management
  # NOTE: Advanced
  echo "project apply"
  echo "project destroy"
  echo "project generate"
  echo "project show"

  # Environment specific commands
  envs="loc ${taito_environments:-}"
  for env_orig in ${envs}
  do
    env="${env_orig}"
    suffix=":${env}"
    param=":${env}"
    param_not_empty=":${env}"
    if [[ ${env_orig} == "loc" ]]; then
      env="local"
      suffix=""
      param=":"
      param_not_empty=":local"
    fi

    echo "config${suffix}"

    echo "env merge${suffix} DESTINATION_BRANCH"

    echo "env init${suffix}"
    echo "env apply${suffix}"
    if [[ ${env} == "local" ]]; then
      # TOOD: Handle all option permutations nicely
      echo "env apply${suffix} --clean --start --init"
      echo "env apply${suffix} --start --init"
      echo "env apply${suffix} --init"
      echo "env apply${suffix} --init --start"
      echo "env apply${suffix} --init --start --clean"
    fi
    echo "env output${suffix}"
    echo "env destroy${suffix}"

    echo "start${suffix}"
    echo "restart${suffix}"
    echo "stop${suffix}"
    # TODO run:ios run:android # Run the application
    echo "init${suffix}"
    echo "init${suffix} --clean"
    echo "info${suffix}"
    echo "test${suffix}"
    echo "status${suffix}"
    echo "dash${suffix}"

    # Secrets
    echo "secret show${suffix}"
    echo "secret show${param} NAME"
    echo "secret export${suffix}"
    echo "secret export${param} NAME"
    echo "secret rotate${suffix}"
    echo "secret rotate${param} NAME"
    for dest_env in ${taito_environments/$env/}; do
      echo "secret copy between${param_not_empty}:${dest_env} NAME"
    done

    if [[ ${cprefix} == "db"* ]] || [[ ${cprefix} == "*" ]]; then
      for database in ${taito_databases:-}
      do
        db=""
        if [[ ${database} != "database" ]]; then
          db=":${database}"
        fi
        echo "db details${db}${suffix}"
        echo "db details${db}${suffix} --credentials"
        echo "db proxy${db}${suffix}"
        echo "db proxy${db}${suffix} --credentials"
        echo "db proxy${db}${suffix} PORT --credentials"
        echo "db connect${db}${suffix}"
        echo "db connect${db}${suffix} USERNAME"
        echo "db status${db}${suffix}"
        echo "db status${db}${suffix} USERNAME"
        echo "db kill${db}${suffix}"
        echo "db kill${db}${suffix} USERNAME"
        echo "db dump${db}${suffix}"
        echo "db import${db}${param}"
        echo "db restore${db}${suffix}"
        echo "db log${db}${suffix}"
        echo "db recreate${db}${suffix}"
        echo "db create${db}${suffix}"
        echo "db drop${db}${suffix}"
        echo "db deploy${db}${suffix}"
        echo "db rebase${db}${suffix}"
        echo "db rebase${db}${param} CHANGE"
        echo "db revert${db}${param} CHANGE"
        echo "db diff${db}${param} SOURCE_ENV"
        for dest_env in ${taito_environments/$env/}; do
          echo "db copy between${db}${param_not_empty}:${dest_env}"
          echo "db copyquick between${db}${param_not_empty}:${dest_env}"
        done
      done
    fi

    # Local-only commands
    if [[ ${env} == "local" ]]; then
      echo "develop"
      echo "start${suffix} --background"
      echo "start${suffix} --clean"
      echo "start${suffix} --init"
      echo "start${suffix} --clean --init"
      echo "start${suffix} --clean --init --prod"
      echo "start${suffix} --background --clean"
      echo "start${suffix} --clean --prod"
      echo "lint${suffix}"
      echo "unit${suffix}"
      echo "unit${suffix}: TEST"
      echo "dep check${suffix}"
      echo "code check${suffix}"
      echo "size check${suffix}"
      echo "docs${suffix}"
    fi

    # Remote-only commands
    if [[ ${env} != "local" ]]; then
      echo "auth${suffix}"
      echo "auth${suffix} --reset"
      echo "env:${env}"

      # echo "alt apply${suffix}"
      # echo "alt rotate${suffix}"
      # echo "alt rotate${param} FILTER"
      # echo "alt destroy${suffix}"

      echo "deployment start${suffix}"
      echo "deployment cancel${suffix}"
      echo "deployment deploy${suffix}"
      echo "deployment deploy${param} IMAGE_TAG"
      echo "deployment wait${suffix}"
      echo "deployment verify${suffix}"
      echo "deployment revisions${suffix}"
      echo "deployment revert${param} REVISION"

      echo "ci run${suffix}"
      echo "build prepare${suffix}"
      echo "build publish${suffix}"
      if [[ ${env%%-*}} == "prod" ]]; then
        echo "build release${suffix}"
      fi

      if [[ ${cprefix} == "storage"* ]] || [[ ${cprefix} == "*" ]]; then
        for storage in ${taito_storages:-}
        do
          st=""
          if [[ ${storage} != "${taito_storages}" ]]; then
            st=":${storage}"
          fi
          echo "storage ls${st}${suffix}"
          echo "storage ls${st}${param} MOUNT_PATH"
          echo "storage mount${st}${suffix}"
          echo "storage mount${st}${param} MOUNT_PATH"
          echo "storage copy from${st}${param} SOURCE LOCAL_DEST"
          echo "storage copy to${st}${param} LOCAL_SOURCE DEST"
          echo "storage sync from${st}${param} SOURCE LOCAL_DEST"
          echo "storage sync to${st}${param} LOCAL_SOURCE DEST"
          for dest_env in ${taito_environments/$env/}; do
            echo "storage copy between${st}${param}:${dest_env} SOURCE DEST"
          done
        done
      fi

      echo "cdn invalidate${param} PATHS"
    fi

    # Stack component commands
    for stack in ${taito_containers}; do
      if [[ ${env} == "local" ]]; then
        echo "unit:${stack}${suffix}"
        echo "unit:${stack}${suffix} TEST"
      fi
      echo "test:${stack}${suffix}"
      if [[ ${cprefix} == "test"* || "${cprefix}" == "*" ]]; then
        suites=($(cat "./${stack}/test-suites" 2> /dev/null))
        for suite in "${suites[@]}"
        do
          echo "test:${stack}${param} ${suite}"
          echo "test:${stack}${param} ${suite} TEST"
        done
      fi
      echo "restart:${stack}${suffix}"
      echo "logs:${stack}${suffix}"
      echo "shell:${stack}${suffix}"
      echo "exec:${stack}${param} COMMAND"
      echo "forward:${stack}${param} LOCAL_PORT REMOTE_PORT"
      echo "copy to:${stack}${param} SOURCE_PATH DESTINATION_PATH"
      echo "copy from:${stack}${param} SOURCE_PATH DESTINATION_PATH"
      echo "kill:${stack}${suffix}"
      echo "show:${stack}${suffix}"
      echo "edit:${stack}${suffix}"
      echo "scale:${stack}${suffix} REPLICAS"
      echo "deployment build:${stack}${suffix}"
      echo "artifact prepare:${stack}${suffix}"
      echo "artifact release:${stack}${suffix}"
    done

    # Links
    if [[ ${cprefix} == "open"* || ${cprefix} == "link"* || ${cprefix} == "curl"* || "${cprefix}" == "*" ]]; then
      while IFS='*' read -ra items; do
        for item in "${items[@]}"; do
          words=(${item})
          link="${words[0]}"
          if [[ ${link} ]]; then
            prefix="$( cut -d '=' -f 1 <<< "$link" )";
            command=${prefix%#*}
            name=${prefix##*#}
            if [[ ${command} == *"[:ENV]"* ]]; then
              command_env=${command/\[:ENV\]/$suffix}
              echo "open ${command_env}"
              echo "link ${command_env}"
              echo "curl ${command_env}"
            elif [[ ${command} == *":ENV"* ]] && \
                 [[ ${env_orig} != "loc" ]]; then
              command_env=${command/:ENV/$suffix}
              echo "open ${command_env}"
              echo "link ${command_env}"
              echo "curl ${command_env}"
            elif [[ ${command} != *":ENV"* ]] && \
                 [[ ${env_orig} == "loc" ]]; then
              echo "open ${command}"
              echo "link ${command}"
              echo "curl ${command}"
            fi
          fi
        done
      done <<< "${link_urls:-}"
    fi
  done
fi
