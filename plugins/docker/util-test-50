#!/bin/bash -e
# shellcheck source=lib/all.bash
. "${taito_plugin_path:?}/../docker-compose/lib/compose.bash"
: "${taito_project:?}"
: "${taito_env:?}"
: "${taito_target_env:?}"
: "${taito_vc_repository:?}"

# Containers, functions and static assets are built with Docker
taito::skip_if_not "container function static_content" "${@}"

dir="${taito_target:?Target not given}"
suite_filter="${1}"
test_filter="${2}"

# TODO: should be in taito-cli core only?
if [[ ${taito_mode:-} == "ci" ]] && [[ ${ci_exec_test:-} != "true" ]]; then
  taito::call_next "${@}"
  exit $?
fi

if [[ -f ${dir}/test.sh ]]; then
  test_executable="./test.sh"
elif [[ -f ${dir}/test ]]; then
  test_executable="./test"
else
  taito::call_next "${@}"
  exit $?
fi

echo "Running tests for ${dir} in ${taito_env} environment"
echo

# Determine command to be run on init phase
init_command="echo 'Not running init (ci_exec_test_init=false)'"
if [[ ${ci_exec_test_init:-} == "true" ]]; then
  init_command="taito_skip_override=false taito ${taito_options:-} init:${taito_env} --clean"
fi

# Determine test suite parameters
# Creates docker parameters: -e ENV_VAR='value' -e ENV_VAR2='value2' ...

# Pass all environment variables with the "test_all_" prefix for the test.
d_all_env_vars=$(set -o posix; set | grep "test_all_" | grep -v "npm_package_scripts" | sed "s/^test_all_/-e /" \
  | sed "s/=/='/" | sed "s/$/'/" | tr '\n' ' ' | sed 's/.$//')
e_all_env_vars=$(set -o posix; set | grep "test_all_" | grep -v "npm_package_scripts" | sed "s/^test_all_/export /" \
  | tr '\n' ' && ' | sed 's/.$//')

# Pass all environment variables with the "test_${dir}_" prefix for the test.
# TODO duplicate code
d_target_env_vars=$(set -o posix; set | grep "test_${dir}_" | grep -v "npm_package_scripts" | sed "s/^test_${dir}_/-e /" \
  | sed "s/=/='/" | sed "s/$/'/" | tr '\n' ' ' | sed 's/.$//')
e_target_env_vars=$(set -o posix; set | grep "test_${dir}_" | grep -v "npm_package_scripts" | sed "s/^test_${dir}_/export /" \
  | tr '\n' ' && ' | sed 's/.$//')

docker_env_vars="\
  -e taito_running_tests='true' \
  -e taito_target_env='${taito_target_env}' \
  -e taito_env='${taito_target_env}' \
  -e taito_mode='${taito_mode}' \
  ${d_all_env_vars} ${d_target_env_vars}"
export_env_vars=""
if [[ ${e_all_env_vars} ]] || [[ ${e_target_env_vars} ]]; then
  export_env_vars="${e_all_env_vars} ${e_target_env_vars} && "
fi
export_env_vars="\
  export taito_running_tests=true
  export taito_target_env=${taito_target_env}
  export taito_env=${taito_env}
  export taito_mode=${taito_mode}
  ${export_env_vars}"

# Determine pod
docker-compose::expose_pod_and_container

if [[ -f "./docker-compose-test.yaml" ]]; then
  docker_compose_test_file=docker-compose-test.yaml
  docker_compose_test_suffix="-test"
fi
if [[ -f "./docker-compose-cicd.yaml" ]]; then
  docker_compose_test_file=docker-compose-cicd.yaml
  docker_compose_test_suffix="-cicd"
fi
if [[ -f "./docker-compose-cicd-${taito_ci_provider:-}.yaml" ]]; then
  docker_compose_test_file="docker-compose-cicd-${taito_ci_provider}.yaml"
fi

# Determine command to be run on test phase
docker_compose="false"
compose_pre_cmd=""
compose_cmd="export pod=${get_pod_command} && docker exec ${docker_env_vars} -it \${pod} ${test_executable} SUITE ${test_filter}"
if [[ ${taito_env} != "local" ]]; then
  # Running against a remote service
  container_test="${taito_project}-${dir}${docker_compose_test_suffix}"
  image_test="${container_test}:latest"
  # REFACTOR: rename -tester image to -cicd
  image_src="${taito_project}-${dir}-tester:latest"
  if [[ ${taito_mode:-} != "ci" ]]; then
    # Use development image for testing
    # NOTE: does not exist if project dir is not named after taito_vc_repository
    # NOTE: was ${taito_vc_repository/-/}
    image_src="${taito_vc_repository}_${taito_project}-${dir}"
  fi
  compose_pre_cmd="(docker image tag ${image_src} ${image_test} || \
    (echo ERROR: Container ${image_src} must be built before tests can be run. HINT: taito start && (exit 1))) && "
  if [[ -f "./${docker_compose_test_file}" ]] && \
     [[ $(grep "${container_test}" "./${docker_compose_test_file}") ]]; then
    docker_compose="true"
    compose_cmd="COMPOSE_HTTP_TIMEOUT=90 DOCKER_HOST_PATH=${DOCKER_HOST_PATH:-.} COMPOSE_PROJECT_NAME=${COMPOSE_PROJECT_NAME:-} docker compose -f ./${docker_compose_test_file} run --rm ${docker_env_vars} ${container_test} sh -c 'sleep 5 && ${test_executable} SUITE ${test_filter}'"

    # On CI mode we might use root user
    if [[ ${taito_mode:-} == "ci" ]] && [[ $(whoami) != "taito" ]]; then
      sed -i "s/^    user: taito/    user: $(whoami)/" "${docker_compose_test_file}"
    fi
  else
    compose_cmd="docker run ${docker_env_vars} --network=host -v \"\$(pwd)/${dir}:/${dir}\" --entrypoint sh ${image_test} ${test_executable} SUITE ${test_filter}"
  fi
fi

# Create test suite template from init and test phase commands
template="(echo && echo 'TEST ${taito_target}:${taito_env} suite=SUITE' && ${init_command} && ${compose_cmd})"

# Generate commands to be run by traversing all test suites
commands=""
suites=( $(grep "${suite_filter}" "./${dir}/test-suites" 2> /dev/null) ) || :
if [[ ${#suites[@]} == 0 ]]; then
  suites=( $(cat "./${dir}/test-suites" | head -1) )
  echo
  taito::print_note_start
  echo "WARNING: No suite found with filter: ${suite_filter}"
  echo "Running the default test suite: ${suites[0]}"
  taito::print_note_end
  echo
fi
for suite in "${suites[@]}"
do
  commands="${commands} && ${template//SUITE/$suite}"
done

# Execute tests
if [[ ! -z ${commands} ]]; then
  commands=": ${commands} && :"
  if [[ ${taito_verbose:-} == true ]]; then
    echo "--- ENV ---"
    echo "COMPOSE_PROJECT_NAME $COMPOSE_PROJECT_NAME"
    echo
    echo "--- EXECUTING ---"
    echo "${compose_pre_cmd}${commands}"
    echo "-----------------"
  fi

  taito::execute_on_host_fg "${compose_pre_cmd}${commands}" ||
    if [[ ${taito_verbose:-} == true ]]; then
      taito::execute_on_host_fg "echo --- ALL CONTAINER LOGS ---; docker compose -f ./${docker_compose_test_file} logs"
      exit 1
    else
      exit 1
    fi
fi

# Stop all test containers started by docker-compose
if [[ ${docker_compose} == "true" ]]; then
  taito::execute_on_host_fg \
    "DOCKER_HOST_PATH=${DOCKER_HOST_PATH:-.} docker compose -f ./${docker_compose_test_file} down || echo OK"
fi

taito::call_next "${@}"
