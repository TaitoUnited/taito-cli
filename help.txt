TAITO CLI
---------

QUICK EXAMPLES

  TROUBLESHOOTING
    trouble                            # Show troubleshooting
    upgrade                            # Upgrade and reinitialize Taito CLI
    version --notes                    # Show Taito CLI release notes

  LOCAL DEVELOPMENT BASICS
    develop                            # Quick start (runs: env apply, start --clean --init)
    env apply                          # Configure local environment and install some libs
    start                              # Start the application. Add --clean --init for clean start.
    init                               # Initialize DB, storages, etc. Add --clean for clean init.
    info                               # Show info required for signing in to the application
    open client                        # Open application GUI on browser
    open admin                         # Open admin GUI on browser
    open graphql                       # Open GraphQL playground on browser
    open bucket                        # Open storage bucket named 'bucket' on browser
    db connect                         # Access default database from command line
    db add article                     # Add a new migration for default database
    db deploy                          # Deploy migrations to default database
    db import file.sql                 # Import a file to default database
    db recreate                        # Recreate the database
    generate                           # Generate schemas or some other stuff. Also run on 'init'.
    code generate NAME                 # Generate code for NAME.
    manage COMMAND                     # Run a tech specific cli command (e.g. Django command)
    secret rotate my-secret            # Set value for secret (restart all containers after)
    install                            # Install newly added libraries (restart container after)
    clean:server                       # Clean build server container
    restart:server                     # Restart server container
    restart                            # Restart all containers
    shell:server                       # Start shell on the server container
    logs:server                        # Show logs of the server container
    workspace kill                     # Kill all running processes (e.g. containers)
    workspace clean                    # Remove all unused build artifacts (e.g. images)

  LINKS
    open project                       # Open project management on browser
    open git                           # Open git repository on browser
    open releases                      # Open release notes on browser
    open ux                            # Open UX guides
    open docs                          # Open project documentation on browser
    open apidocs:dev                   # Open generated API documentation on browser
    open client:dev                    # Open application GUI on browser
    open admin:dev                     # Open admin GUI on browser
    open server:dev                    # Open server API endpoint on browser
    open graphql                       # Open GraphQL playground on browser
    open bucket                        # Open storage bucket named 'bucket' on browser
    open builds:dev                    # Open build logs on browser
    open logs:dev                      # Open logs on browser (e.g. Stackdriver or Kibana)
    open errors:dev                    # Open error tracking on browser
    open uptime:prod                   # Open uptime monitoring on browser
    open tracing:prod                  # Open distributed tracing on browser
    open performance:prod              # Open performace monitoring
    open feedback:prod                 # Open user feedback management
    open analytics:prod                # Open usage analytics
    open -h                            # List all links

  CODE
    generate                           # Generate schemas or some other stuff. Also run on 'init'.
    code generate NAME                 # Generate code for NAME.
    manage COMMAND                     # Run a tech specific cli command (e.g. Django command)

  QUALITY CONTROL
    lint                               # Lint code
    unit                               # Run all unit tests
    unit:client                        # Run all unit tests of client container
    unit:client car                    # Run the 'car' unit test of client container
    test                               # Run all integration and e2e tests
    test:server                        # Run all integration and e2e tests of server
    test:server trip car               # Run the 'car' test of 'trip' test suite
    test:dev                           # Run integration/e2e tests against dev env
    code check                         # Check code quality
    code check:client                  # Check code quality of the client
    dep check                          # Check dependencies
    dep check:server                   # Check dependencies of the server
    size check                         # Check size
    size check:client                  # Check size of the client

  INFORMATION
    info:dev                           # Show information required for signing in
    status:dev                         # Show application status
    dash:dev                           # Show application status on terminal dashboard

  SECRETS
    secret show:dev                    # Show all secrets
    secret show:dev jwt                # Show jwt secret
    secret export:dev                  # Export all secrets to local disk
    secret export:dev jwt              # Export jwt secret to local disk
    secret rotate:dev                  # Rotate all secrets
    secret rotate:dev jwt              # Rotate jwt secret
    secret copy between:dev:test jwt   # Copy jwt secret from dev to test

  APPLICATION CONTROL
    start:dev                          # Start application
    restart:dev                        # Restart application
    stop:dev                           # Stop application
    down:dev                           # Stop and remove application
    init:dev                           # Initialize DB, storages, etc. Add --clean for clean init.

  CONTAINERS
    logs:server:dev                    # Tail logs of a container named 'server'
    logs:server:dev 0                  # Tail logs of a specific server instance
    kill:server:dev                    # Kill a container named 'server'
    kill:server:dev 0                  # Kill specific server instance
    show:server:dev                    # Show server deployment
    edit:server:dev                    # Edit server deployment
    scale:server:dev 0                 # Scale server deployment to 0 replicas
    restart:server:dev                 # Restart container named 'server'
    restart:server:dev 0               # Restart specific server instance
    shell:server:dev                   # Start a shell on a container named 'server'
    shell:server:dev 0                 # Start a shell on a specific server instance
    exec:server:dev echo foo           # Execute a command in a container named 'server'
    exec:server:dev 0 echo foo         # Execute a command in a specific server instance
    forward:redis:dev 6000 6379        # Forward local port 6000 to container port 6379
    save:client                        # Save changes to client container image
    clean:server                       # Clean server container by deleting it
    copy to:server:dev file.f /dir     # Copy a file/folder to server container
    copy to:server:dev 0 file.f /dir   # Copy a file/folder to server container
    copy from:server:dev /dir/file .   # Copy a file/folder from server containr
    copy from:server:dev 0 /dir/file . # Copy a file/folder from server containr
    sync to:server:dev dir /dir        # Sync folder to server container
    sync from:server:dev /dir .        # Sync folder from server container

  DATABASES
    db connect:dev                     # Access default database on command line
    db connect:reportdb:dev            # Access report database on command line
    db proxy:dev                       # Start a database proxy for a GUI tool access
    db dump:dev dump.sql               # Dump default database to a file
    db import:dev file.sql             # Import a file to default database
    db restore:dev archive             # Restore default database from an archive file
    db log:dev                         # View change log of default database
    db recreate:dev                    # Recreate the default database
    db add article                     # Add a new migration for default database
    db deploy:dev                      # Deploy changes to default database
    db rebase:dev                      # Rebase a database (db revert + db deploy)
    db rebase:dev b91b7b2              # Rebase a database (db revert + db deploy)
    db revert:dev b91b7b2              # Revert a database
    db diff:dev test                   # Compare db schemas of dev and test environments
    db copy between:test:dev           # Copy test database to dev
    db copyquick between:test:dev      # Copy test database to dev (WARNING!!)

  STORAGES
    storage ls:dev /my-dir             # List storage files
    storage mount:dev                  # Mount dev storage bucket to ./mnt/BUCKT
    storage mount:dev mymount          # Mount dev storage bucket to ./mymount
    storage copy from:dev /sour dest   # Copy files from dev bucket
    storage copy to:dev sour /dest     # Copy files to dev bucket
    storage sync from:dev /sour dest   # Sync files from dev bucket
    storage sync to:dev sour /dest     # Sync files to dev bucket

  CDN
    cdn invalidate /index.html         # Invalidate objects stored in CDN.

  MESSAGE QUEUES
    topic list:dev                     # List all topics in dev environment
    topic publish:dev my-topic         # Publish a message to a topic
    topic subscribe:dev my-topic       # Subscribe for messages in a topic
    topic clean:dev my-topic           # Remove all messages of a topic

  VERSION CONTROL
    conventions                        # Show version control conventions
    env list                           # List all environment branches
    env:dev                            # Switch to the dev environment branch
    env merge                          # Merge current env branch to the next env branch
    env merge:dev stag                 # Merge changes between envs: dev -> ... -> stag
    feat list                          # List all feature branches
    feat: pricing                      # Switch to feat/pricing (create if not exists)
    feat rebase                        # Rebase current feature branch with the original
    feat merge                         # Merge current feature branch to the original
    feat pr                            # Create a pull-req for the current feature branch
    feat squash                        # Merge current feature branch as a single commit
    pull                               # Pull changes
    push                               # Push changes
    stage                              # Stage all changes
    unstage                            # Unstage all changes
    discard                            # Discard unstaged changes
    commit                             # Commit staged changes
    commit revert                      # Revert the latest commit by creating a new commit
    commit undo                        # Undo latest commit from local and remote branch
    commit erase                       # Erase latest commit from loc/rem branch and files
    commit empty "chore: run ci/cd"    # Add an empty commit
    tag 1.2.3                          # Create tag
    untag 1.2.3                        # Delete tag

  DEPLOYMENT OPERATIONS
    deployment start:dev               # Start ci build for dev environment manually
    deployment cancel:dev              # Cancel an ongoing dev environment ci build
    deployment build:server:dev        # Build and deploy server container to dev env
    deployment deploy:dev              # Deploy latest dev version to dev env
    deployment deploy:dev 1.1.1        # Deploy prebuilt version to dev env
    deployment wait                    # Wait for deployment
    deployment verify                  # Verify deployment, autorevert if necessary
    deployment revisions:dev           # Show current revision on dev env
    deployment revert:dev 20           # Revert application on dev env to revision 20

  BUILDS (mainly for CI/CD)
    ci run:dev                         # Run CI/CD script for dev locally
    build prepare:dev                  # Prepare build
    artifact prepare:server:dev TAG    # Prepare artifact for deployment
    artifact release:server:dev TAG    # Release artifact
    build release:prod                 # Release build for prod environment

  PROJECT TEMPLATES
    project create my-template         # Create a project based on "my-template"
    project upgrade                    # Upgrade project using the original template

  PROJECT CONFIGURATION
    project apply                      # Migrate project to the latest configuration
    project generate                   # Generate project documentation or other resources
    project show                       # Show some important project details
    project destroy                    # Destroy project

  PROJECT INFRASTRUCTURE MANAGEMENT
    env info:dev                       # Show environment information
    env init:dev                       # Initialize configuration with new dependencies
    env apply:dev                      # Apply project specific changes to dev env
    env output:dev                     # Display output values of dev env
    env destroy:dev                    # Destroy dev environment of the current project

  ZONE INFRASTRUCTURE MANAGEMENT
    zone create gcp                    # Create a new zone based on the gcp template
    zone init                          # Initialize configuration with new dependencies
    zone apply                         # Apply infrastructure changes to the zone
    zone status                        # Show status summary of the zone
    zone doctor                        # Analyze and repair the zone
    zone maintenance                   # Execute maintenance tasks interactively
    zone destroy                       # Destroy the zone

  PASSWORD SHARING
    passwd share                       # Share with a one-time magic link
    passwd list movie                  # List all movie passwords
    passwd get movie-key               # Get movie-key passwd
    passwd set movie-key               # Set movie-key passwd
    passwd rotate movie                # Rotate all movie passwords

  PROJECT MANAGEMENT:
    issue auth                         # Authenticate
    issue add "Delete post" feature posts              # Add a new issue
    issue state change "Delete post" in-progress me    # Change status of issue
    issue comment add "Delete post"                    # Add a comment
    issue open "Delete post"           # Open issue on browser
    issue list todo                    # List todo issues
    open project                       # Open project management

  HOUR REPORTING:
    hours auth                         # Authenticate
    hours start                        # Start/continue the timer
    hours pause                        # Pause the timer
    hours stop                         # Stop the timer and create an entry
    hours add 6.5                      # Add an hour entry for today
    hours add 6.5 yesterday            # Add an hour entry for yesterday
    hours add 6.5 tue Did some work    # Add an hour entry for last tuesday
    hours list                         # Hour entries of this month
    hours list all                     # Hour entries for all projects
    hours show                         # Hour summary for this month
    hours show this-week               # Hour summary for this week
    open hours                         # Open hour reporting on browser

    TODO bulk adds (e.g. three weeks on vacation)

  UTILS:
    taito util browser https://hs.fi   # Launch browser
    taito util commit                  # Commit changes to Taito CLI
    taito -q random string 30          # Generate a random string
    taito -q random words 3            # Generate random words
    taito -q random uuid               # Generate random UUID
    taito util test:client:dev jest    # Run all tests of 'jest' test suite

OPTIONS

  --help, -h
    Show help.txt of current project and a list of all Taito CLI commands.
    Run 'taito COMMAND -h' to get help for a specific command or
    'taito PREFIX -h' to get help for a specific set of commands.
    ---
    Examples:
      taito -h
      taito db -h
      taito db dump -h

  --search, -s
    Same as '--help' but executes a wider search by including also command
    descriptions in search. TODO implement

  --dev, -d
    Run in development mode. In the development mode your local Taito CLI
    directory is mounted on the container.
    TODO always pass on -d switch when running another taito command

  --
    Execute any command inside the Taito CLI container. Example:
    taito -- kubectl get pods

  --admin, -a
    Execute as admin.

  --root, -r
    Execute as root user.

  --project PROJECT, -p PROJECT
    Execute command in the context of given project. This command allows
    you to execute a Taito CLI command without cloning the project repository
    to your local disk.
    ---
    Examples:
      taito -p my-project open client:dev
      taito -p org@another-project open info:prod

  --organization ORG, -o ORG
    Use taito configuration overrides defined in '~/.taito/taito-config-ORG.sh'.

  --mount HOST_PATH:CONTAINER_PATH, -m HOST_PATH:CONTAINER_PATH
    Mount directory inside Taito CLI container.
    ---
    Examples:
      taito -m ~/myfolder:/myfolder shell

  --verbose, -v
    Show commands that plugins execute.

  --debug
    Show debug output.
    TODO just output everything with 'set -x' ?

  --quiet, -q
    No logging output.
    TODO implement

  -c
    Informs Taito CLI that the command is continuing from a previous command
    execution and therefore the copyright license should not be shown again.

  -z
    Skip taito command overrides during execution.

ARGUMENTS

  Target (TARGET) and environment (ENV) are included in the command itself.
  Colon is used as delimiter. ENV is local by default if omitted.
  ---
  Examples:
    taito shell:worker
    taito shell:worker:dev
    taito status:dev
    taito open client:dev

  All other arguments are given after the command.
  ---
  Examples:
    taito exec:worker:dev echo jee
    taito db import:dev file.sql
    taito hours add 6.5

  ENV
    Environment: For example 'local', 'feat-orders', 'demo', 'dev', 'test',
    'uat', 'stag', 'canary' or 'prod'. Environment is 'local' by default.
    For mobile projects ENV can also be 'ios' or 'android'.

  TARGET
    Depending on the environment, TARGET may reference to a Kubernetes pod,
    a Docker container, a function, a database or some other module.

TAITO: BASIC OPERATIONS

  auth[:ENV] [--reset]
    Authenticate in the context of the given environment. Also sets the
    default context for shell commands like 'taito -- kubectl get pods'
    or 'taito shell'.

  autocomplete, descriptions
    Prints all commands.

  check
    Check Taito CLI installation

  config[:ENV]
    Show taito config values.

  readme
    Show README.md of current project.

  shell
    Start interactive shell on the Taito CLI container.

  trouble
    Show trouble.txt of current project and Taito CLI.

  upgrade
    Upgrade Taito CLI and its extensions to the latest version.

  version [--notes]
    Print version and optionally also release notes.

PROJECT: BASIC OPERATIONS

  develop
    The command executes a full clean startup by executing 'env apply', 'start',
    and 'init' commands consecutively with the '--clean' option.

  env init [NAME]
    Initialize configuration with new dependencies. This will refresh your
    Terraform lock files, etc.

  env apply [NAME]
    Configure the local environment.

  install [--clean] [--lock]
    Install everything that needs to installed locally on host (e.g. libraries
    for linting and autocompletion purposes). Use the '--clean' flag to execute
    a clean install. Use the '--lock' flag to install version locked packages.
    NOTE: Usually you don't run this command as 'env apply' executes also
    install.
    TIP: Enable the 'make', 'npm' or 'pipenv' plugin.

  link
    Link libraries.

  build[:BUILD_TARGET]
    Builds a project. This command is for non-dockerized projects that need to
    be compiled or built before application can be started.
    TIP: Enable the 'make' plugin and implement the script in your makefile.

  start[:TARGET][:ENV] [--background -b] [--clean] [--init] [--prod] [ARGS]
    Starts the defined environment e.g 'taito start' or 'taito start:dev'.
    ---
    Arguments (mostly for local development):
      --backgroud(-b): Run in background.
      --clean: Clean everything before start.
      --init: Run 'taito init' after start.
      --prod: Run production build instead of development build.
      TARGET: Start only the given pod/container/function/module/program
      ARGS: Additional arguments

  restart[:TARGET][:ENV] [INDEX]
    Starts the defined environment e.g 'taito restart' or 'taito restart:dev'.
    ---
    Arguments:
      TARGET: Restart only the given pod/container/function/module/program
      INDEX: Restart only the specific instance (0-N)

  run[:TARGET]:ENV [--no-deps] [-d,--device] [ARGS]
    Runs the application in the defined environment e.g 'taito run:ios'.
    ---
    Arguments (mostly for local development):
      -d,--device: Run on a real device instead of emulator.
      --no-deps: TODO Do not run dependencies (e.g linked services)
      TARGET: Run only the given pod/container/function/module/program
      ARGS: Additional arguments

  init[:ENV] [--clean]
    Make sure that everything has been initialized after start (database, etc.).
    Use the '--clean' flag to delete all existing data before init.

  stop[:ENV]
    Stops the application in the defined environment e.g 'taito stop'
    or 'taito stop:dev'.

  down[:ENV]
    Stops the application in the defined environment, and removes data and
    resources.

  info[:ENV]
    Show some useful information about the environment (e.g. shared user
    accounts that you can use to log in).
    TIP: Enable the 'make' or 'npm' plugin and implement info[:ENV] script
    in your makefile/package.json.

  generate[:TARGET]
    Generate schemas or some other stuff. Also run on 'init'.

  code generate[:TARGET] NAME
    Generate code for NAME.

  manage[:TARGET] COMMAND
    Run a tech specific cli command (e.g. Django command).

  unit[:TARGET] [TEST]
    Run unit tests.
    TIP: Enable the 'make' or 'npm' plugin and implement unit script in your
    makefile/package.json.

  test[:TARGET][:ENV] [SUITE] [TEST]
    Run integration and end-to-end tests.
    TIP: Enable the 'make' or 'npm' plugin and implement test scripts in your
    makefile/package.json using the `taito `. You can configure test users and
    passwords for each environment in taito-config.sh as those settings are
    available to your script as environment variables. At least implement tests
    for dev environment.

  scan
    Lint code, scan for vulnerabilities, etc.
    TIP: Enable the 'make' or 'npm' plugin and implement scan script in your
    makefile/package.json.

  lint
    Lint code
    TIP: Enable the 'make' or 'npm' plugin and implement lint script in your
    makefile/package.json.

  code check[:TARGET]
    Check code quality

  dep check[:TARGET]
    Check dependencies

  size check[:TARGET]
    Check size

  docs
    Generate docs e.g. API docs from API definitions and PDF files from
    markdown documentation.
    TIP: Enable the 'make' or 'npm' plugin and implement docs script in your
    makefile/package.json.

  secrets[:ENV] [NAME] [--show-files]
    Retrieves secrets that might be needed by a developer or CI/CD build.

  status[:ENV] [--all] [--all-namespaces]
    Show status summary of environment (status of services, pods, etc.).
    Show more details with '--all'. Show all namespaces with '--all-namespaces'.

  dash[:ENV]
    Display status on a terminal based dashboard.

  logs[:TARGET][:ENV] [INDEX]
    Follow logs of a pod.
    ---
    Arguments:
      INDEX: Show logs of a specific instance (0-N)
    ---
    Examples:
      taito logs:client
      taito logs:client:dev
      taito logs:client:dev 1
      taito logs:my-app-client-3034393823-2f5jf:dev

  shell[:TARGET][:ENV]
    Start a shell on a container.
    ---
    Arguments:
      INDEX: Start shell on a specific instance (0-N)
    ---
    Examples:
      taito shell:client
      taito shell:client:dev
      taito shell:client:dev 1
      taito shell:client:dev my-app-client-3034393823-2f5jf

  exec[:TARGET][:ENV] [INDEX] COMMAND
    Execute command in container.
    ---
    Arguments:
      INDEX: Execute on a specific instance (0-N)
    ---
    Examples:
      taito exec:client echo "taito!"
      taito exec:client:dev echo "taito!"
      taito exec:client:dev 1 echo "taito!"
      taito exec:my-app-client-3034393823-2f5jf:dev echo "taito!"

  forward:TARGET[:ENV] [INDEX] LOCAL_PORT [REMOTE_PORT]
    Forward local port to remote container port
    ---
    Arguments:
      INDEX: Forward to a specific instance (0-N)
    ---
    Examples:
      taito forward:redis:dev 6379
      taito forward:redis:dev 6000 6379

  copy to:TARGET[:ENV] [INDEX] SOURCE_PATH DESTINATION_PATH
    Copy a file or folder.
    ---
    Arguments:
      INDEX: Copy to a specific instance (0-N)
    ---
    Examples:
      taito copy to:client foo.txt /client/foo.txt
      taito copy to:client:dev foo.txt client:/client/foo.txt
      taito copy to:client:dev 1 foo.txt client:/client/foo.txt

  copy from:TARGET[:ENV] [INDEX] SOURCE_PATH DESTINATION_PATH
    Copy a file or folder.
    ---
    Arguments:
      INDEX: Copy to a specific instance (0-N)
    ---
    Examples:
      taito copy from:client /client/foo.txt .
      taito copy from:client:dev /client/foo.txt .
      taito copy from:client:dev 1 /client/foo.txt .

  sync to:TARGET[:ENV] [INDEX] SOURCE_PATH DESTINATION_PATH
    Sync a folder. TODO IMPLEMENT
    ---
    Arguments:
      INDEX: Sync to a specific instance (0-N)
    ---
    Examples:
      taito sync to:client foo /foo
      taito sync to:client:dev foo /foo
      taito sync to:client:dev 1 foo /foo

  sync from:TARGET[:ENV] [INDEX] SOURCE_PATH DESTINATION_PATH
    Sync a folder. TODO IMPLEMENT.
    ---
    Arguments:
      INDEX: Sync from a specific instance (0-N)
    ---
    Examples:
      taito sync from:client /foo foo
      taito sync from:client:dev /foo foo
      taito sync from:client:dev 1 /foo foo

  kill:TARGET[:ENV] [INDEX]
    Kill a container.
    ---
    Arguments:
      INDEX: Kill a specific instance (0-N)
    ---
    Examples:
      taito kill:client
      taito kill:client:dev
      taito kill:client:dev 1
      taito kill:my-app-client-3034393823-2f5jf:dev

  show:TARGET[:ENV]
    Show deployment.
    ---
    Examples:
      taito show:server:dev

  edit:TARGET[:ENV]
    Edit deployment.
    ---
    Examples:
      taito edit:server:dev

  scale:TARGET[:ENV] REPLICAS
    Scale deployment.
    ---
    Arguments:
      REPLICAS: Number of replicas
    ---
    Examples:
      taito scale:server:dev 0
      taito scale:server:dev 2

  save:TARGET
    Save changes to a container

  clean[:TARGET]
    Clean.

PROJECT: SECRETS

  secret show[:ENV] [NAME]
    Show project specific secrets.

  secret export[:ENV] [NAMES...]
    Export project specific secrets.

  secret rotate[:ENV] [NAME]
    Rotate project specific secrets.

  secret copy between:dev:test NAME
    Copy secret from dev to test.

PROJECT: LINKS

  > You can specify project specific browser links with the links plugin.
  > Here are some recommended link names that are also included in the
  > Taito CLI autocomplete scripts:
  >
  > open client[:ENV] - Application GUI
  > open admin[:ENV] - Admin GUI
  > open bucket - Storage bucket named 'bucket' used by the app
  > open docs - Built docs
  > open project - Project management
  > open git - Git repository (e.g. GitHub)
  > open releases - Release notes
  > open builds - List of builds (e.g. Jenkins, Google container builder)
  > open artifacts - Build artifacts
  > open reports - CI/CD reports (e.g. testing and code analysis)
  > open errors:ENV - Error Tracking (e.g. Sentry)
  > open logs:ENV - Logs (e.g. Stackdriver)
  > open uptime - Uptime monitoring (e.g. Stackdriver)
  > open alerts - Monitoring alerts
  > open tracing - Open distributed tracing
  > open performance - Performace monitoring (e.g. New Relic)
  > open feedback - User feedback management
  > open analytics - Usage analytics (e.g. Google Analytics)

PROJECT: PROJECT MANAGEMENT

  issue auth [SYSTEM]
    Authenticate to the issue management system.

  issue add TITLE [LABELS...]
    Add a new issue. You'll be asked to enter issue description once you run
    the command.

  issue open TITLE|ID
    Open issue on browser.

  issue state change TITLE|ID STATE [PERSON]
    Change issue state. Optionally assign the issue to another person.
    You'll be asked for a comment once you run the command, but you can leave
    it empty.

  issue comment add TITLE|ID
    Comment on issue. You'll be asked to enter the comment once you run the
    command.

  issue list [LANES|LABELS]
    List open issues.

PROJECT: HOUR REPORTING

  hours auth [SYSTEM]
    Authenticate to the hour reporting system.

  hours start
    Start/continue the timer

  hours pause:
    Pause the timer

  hours stop
    Stop the timer and create an hour entry. You'll be asked for a description
    once you run the command. If hour reporting system has multiple tasks
    configured for the project in question, you also need to choose one of the
    tasks.

  hours add hours [WEEKDAY|today|yesterday]
    Add an hour entry. You'll be asked for a description once you run the
    command. If hour reporting system has multiple tasks configured for the
    project in question, you also need to choose one of the tasks.
    ---
    Examples:
      taito hours add 6.5
      taito hours add 5,5 yesterday
      taito hours add 4,5 tue

  hours list [all]
    List all hour entries for this month. By default lists only for current
    project, but you can list also hour entries for all projects.

  hours show [this-month|last-month|this-week|last-week]
    Show hour summary for all projects. Shows summary for this month by default.

  TODO bulk adds (e.g. three weeks on vacation)

GLOBAL: WORKSPACE OPERATIONS

  workspace clean
    Clean your workspace e.g. by deleting all docker container images and
    volumes that you haven't used for a while.

  workspace kill
    Kill all running processes (e.g. kill all docker processes to free reserved
    ports).

PROJECT: VERSION CONTROL OPERATIONS

  conventions
    Show version control conventions.

  env list
    List all environment branches.

  env:ENV [SOURCE_ENV]
    Creates a new environment branch or executes a normal branch checkout if
    the branch already exists. The dev branch is used as a default source
    branch.

  env merge[:SOURCE_ENV] [DESTINATION_ENV] [--force]
    Merges source env branch to target env branch and all env branches in
    between them without making changes to the current local git workspace.
    Current branch is used as the default source env and the next env branch
    as the default destination branch. The command fails if fast-forward is not
    possible. Merge operations between environment branches should always be
    fast-forwarded so that a container is first built for dev environment and
    then the same container is deployed to other environments as well once
    environment branches are merged.

  feat list
    List all feature branches.

  feat:[ENV] FEATURE_NAME
    Creates a new branch for a feature or executes a normal branch checkout if
    the branch already exists. The dev branch is used as a default env branch
    (source branch).

  feat rebase[:ENV] [FEATURE_NAME]
    Rebases a feature branch. The dev branch is used as a default env branch
    that the feature branch is rebased with.

  feat merge[:ENV] [FEATURE_NAME]
    Merges a feature to a target branch. The dev branch is used as a
    default env branch (destination for merge). The command suggests rebase
    before merge and delete feature after merge. With rebase you can clean up
    commit history before merge e.g. by reordering commits and selectively
    squashing some of them together.

  feat pr[:ENV] [FEATURE_NAME]
    Creates a pull request for a feature. The dev branch is used as a default
    env branch (destination for merge). The command suggests rebase before
    making the pull request. With rebase you can clean up commit history by
    reordering commits and selectively squashing some of them together.

  feat squash[:ENV] [FEATURE_NAME]
    Merges a feature to a target branch as a single squashed commit and
    deletes the feature branch. The dev branch is used as a default env
    branch (destination for merge). Use this command for a short-lived feature
    branch with a cohesive set of changes.

  pull
    Pull changes

  push
    Push changes

  stage
    Stage all changes

  unstage
    Unstage all changes

  discard
    Discard unstaged changes

  commit
    Commit staged changes

  commit revert
    Revert the latest commit by creating a new commit.

  commit undo
    Undo the latest commit from local and remote repository, but leave the
    local files untouched. The command will fail if your local branch is not
    up-to-date with the remote repository.

  commit erase
    Erase the latest commit from local and remote repository, and remove the
    changes also from local files. The command will fail if your local branch
    is not up-to-date with the remote repository.

  commit empty [MESSAGE]
    Add an empty commit. You can use this for example to trigger CI/CD builds.

  tag TAG [COMMENT]
    Create tag

  untag TAG
    Remove tag

PROJECT: DATABASE OPERATIONS

  db add:[TARGET] NAME [-r REQUIRES] [-n DESCRIPTION]
    Add a new change to migration plan. Run 'db add' without arguments to get
    help. You can run the change to local database by running `taito db:deploy`.
    Example: 'taito db add order -r user -n 'Table for orders.'

  db proxy[:TARGET][:ENV] [PROXY_PORT] [--credentials]
    Starts a proxy for accessing a database and shows connections details that
    you should use with your database GUI tool to connect the database. If
    proxy is not required, the command shows connection details nevertheless.
    If you don't have a personal account for the database, you can get a
    working username and password by running `taito secret show:ENV`. Note that
    passwords are rotated once in a while, thus, if you get an authentication
    error, retrieve new secrets by running `taito secret show:ENV` again.

  db details[:TARGET][:ENV] [--credentials]
    Shows connections details that an application should use to connect
    database.

  db connect[:TARGET][:ENV] [USERNAME]
    Access database from command line. DB proxy connection and secrets are
    handled automatically.
    ---
    Tips:
      - If you want to access database using a GUI tool, use the db proxy:ENV
      command instead.
      - On PostgreSQL, you can access your local files using the client based
      backslash commands, for example:
        \\copy my_table FROM `my_table.csv` delimiter `|` csv

  db dump[:TARGET][:ENV] FILE [USERNAME] [--] [TOOL_OPTIONS]
    Take a database dump. DB proxy connection and secrets are handled
    automatically. You can pass tool specific options with TOOL_OPTIONS.
    ---
    Examples (with typical pg_dump tool options):
      taito db dump:dev archive -- --format=custom
      taito db dump:dev archive -- --format=directory --jobs=4
      taito db dump:dev file.sql -- --no-owner --no-privileges
      taito db dump:dev file.sql -- --data-only
      taito db dump:dev file.sql -- --schema=public --blobs --clean

  db import[:TARGET][:ENV] FILE [USERNAME] [--] [TOOL_OPTIONS]
    Import a file to database. DB proxy connection and secrets are
    handled automatically. Always give file path relative to the project root.
    ---
    Examples (with typical pg_dump tool options):
      taito db import:dev file.sql
      taito db import:dev file.sql -- -v ON_ERROR_STOP=1

  db restore[:TARGET][:ENV] FILE [USERNAME] [--] [TOOL_OPTIONS]
    Restore database from an archive file. DB proxy connection and secrets are
    handled automatically. Always give file path relative to the project root.
    ---
    Examples (with typical pg_restore tool options):
      taito db restore:dev archive -- --no-owner --no-privileges
      taito db restore:dev archive -- --data-only
      taito db restore:dev archive -- --format=directory --jobs=4

  db deploy[:TARGET][:ENV]
    Deploy changes to database. DB proxy connection and secrets are handled
    automatically.

  db diff[:TARGET][:ENV] [OTHER_ENV]
    Compare database schemas of two environments. DB proxy connection and
    secrets are handled automatically. TODO implement.

  db log[:TARGET][:ENV]
    View change log of database. DB proxy connection and secrets are handled
    automatically.

  db rebase[:TARGET][:ENV] [CHANGE]
    Rebases database by running 'db revert' and then 'db deploy'. DB proxy
    connection and secrets are handled automatically. The command reverts all
    changes by default. If you would like to revert to a specific revision
    instead, view the change log first with `taito db log[:ENV]` and then run
    `taito db revert[:ENV] CHANGE`.

  db revert[:TARGET][:ENV] [CHANGE]
    Revert all database changes. DB proxy connection and secrets are
    handled automatically. If you would like to revert to a specific revision
    instead, view the change log first with `taito db log[:ENV]` and then run
    `taito db revert[:ENV] CHANGE`.

  db recreate[:TARGET][:ENV]
    Recreates the database. Thus on next deployment, all database migrations
    will be run from the beginning. DB proxy connection and secrets are handled
    automatically.

  db copy between[:TARGET]:SOURCE_ENV:DEST_ENV
    Copy database from one environment to another. For example
    `db copy between:prod:stag` or `db copy between:dev:local`. If you do not
    have enough rights, ask devops personnel to do this for you. DB proxy
    connection and secrets are handled automatically.

  db copyquick between[:TARGET]:SOURCE_ENV:DEST_ENV
    Copy database quickly from one environent to another. DB proxy connection
    and secrets are handled automatically. NOTE: The command requires
    that both databases are located on the same database cluster. The command
    might also do some quirky things to make copying quicker so it might not
    be safe to use it with a live production database.

PROJECT: STORAGE OPERATIONS

  storage ls[:TARGET]:ENV [PATH]
    List files of storage bucket.

  storage mount[:TARGET]:ENV [MOUNT_PATH]
    Mount storage bucket to MOUNT_PATH or mnt/BUCKET

  storage copy between[:TARGET]:ENV:DEST_ENV [SOURCE] [LOCAL_DEST]
    Copy files between storage buckets

  storage copy from[:TARGET]:ENV SOURCE LOCAL_DEST
    Copy files from storage bucket to local disk

  storage copy to[:TARGET]:ENV LOCAL_SOURCE DEST
    Copy files from local disk to storage bucket

  storage sync from[:TARGET]:ENV SOURCE LOCAL_DEST
    Sync files from storage bucket to local disk

  storage sync to[:TARGET]:ENV SOURCE DEST
    Sync files from local disk to storage bucket

PROJECT: CDN OPERATIONS

  cdn invalidate [PATHS...]
    Invalidate objects stored in CDN.

PROJECT: DEPLOYMENT OPERATIONS

  deployment start:ENV
    Start ci build manually.

  deployment cancel:ENV [IGNORE_BUILD_ID]
    Cancel an ongoing build, but ignore the given build id.

  deployment build:[ENV] NAME
    Build, push and deploy a container or some other deployable module to
    server. Use this when you need to quickly deploy manual changes to some
    environment. Example: taito deployment build:dev server

  deployment deploy:ENV [IMAGE_TAG|SEMANTIC_VERSION] [--dry-run]
    Deploys a prebuilt version to the given environment using the current
    configuration. Uses the latest prebuilt version of the environment
    in question by default.

  deployment wait[:ENV]
    Waits until application has been succesfully deployed to server.
    For example polls the app url until version number changes to something
    else. This is used by CI/CD scripts to wait deployment before running the
    api and e2e tests.

  deployment verify[:ENV]
    Verifies that everything went ok e.g. by checking test results. If something
    went wrong and autorevert is enabled for the environment, runs
    `taito db revert[:ENV]` and `taito deployment revert[:ENV]`.

  deployment revisions[:ENV]
    Show revision history.

  deployment revert[:ENV] [REVISION]
    Reverts application to another revision. Reverts to the previous version
    if revision has not been given as argument. You can see current revision
    number by running `taito deployment revisions[:ENV]`.

PROJECT: BUILDS (mainly for CI/CD)

  build prepare
    Make some preparations if required. Typically this step installs some
    libraries, determines if the artifacts (e.g. container images) have already
    been built, and the new version number for the release by the type of
    commits (feature, fix, etc).

  artifact prepare:TARGET[:ENV] IMAGE_TAG [IMAGE_TARGET]
    Prepares artifact for deployment.

  artifact release:TARGET[:ENV] IMAGE_TAG
    Releases previously built artifact.

  build release:ENV
    Release pre and post handling. These commands usually generate release notes
    automatically and tag the git repository with a new version number.
    TIP: Enable the 'make' or 'npm' plugin and implement release-pre:prod and
    release-post:prod scripts in your makefile/package.json.

PROJECT: TEMPLATES

  project create TEMPLATE [BRANCH]
    Create a new project using a template. TEMPLATE is the name of the template.
    By default the command uses the master branch of the template, but you can
    override this with BRANCH.
    ---
    Examples:
      taito project create full-stack-template
      taito project create react-native-template
      taito project create react-native-template dev

  project migrate TEMPLATE [BRANCH]
    Migrate an old project to use the given template.

  project upgrade [BRANCH]
    Upgrade current project to the latest version of the project template.

PROJECT: BASIC SETUP

  project apply
    Migrate project to the latest configuration.

  project destroy
    Destroy project.

  project generate
    Generate project documentation or other resources.

  project show
    Show some important project details.
    TIP: Enable the 'make' or 'npm' plugin and implement project-show
    script in your makefile/package.json.

PROJECT: ENVIRONMENT SETUP

  env info:ENV [NAME]
    Show environment information

  env apply:ENV [NAME]
    Migrate environment to the latest configuration.

  env output:ENV [NAME]
    Display output values of an environment.

  env destroy:ENV [NAME]
    Destroy an environment.

ZONE

  zone create TEMPLATE
    Create a new zone based on a template.

  zone init [NAME]
    Initialize configuration with new dependencies. This will refresh your
    Terraform lock files, etc.

  zone apply [NAME]
    Apply infrastructure changes to a zone.

  zone status [NAME]
    Show status summary of a zone.

  zone doctor [NAME]
    Analyze and repair a zone.

  zone maintenance [NAME]
    Execute supervised maintenance tasks that need to be run periodically for
    a zone (e.g. upgrades, secret rotation, log reviews, access right reviews).

  zone destroy [NAME]
    Destroy a zone.

GLOBAL: PASSWORDS

  random string LENGTH
    Generate a random string.

  random words NUM_OF_WORDS
    Generate random words.

  random uuid
    Generate random UUID.

  passwd share
    Sets a one-time shared password that can be read only once using a
    magic link and will be removed automatically after a while if it has not
    been read at all.
    TODO implement.

  passwd list [-c COLLECTION] [NAME_FILTER]
    List secret names from commonly shared secrets.
    TODO implement.

  passwd get [-c COLLECTION] [NAME]
    Get password from a secret collection.
    TODO implement.

  passwd set [-c COLLECTION] [NAME]
    Save password to a secret collection. Takes a backup of the old secret
    if it exists.
    TODO implement.

  passwd rotate [-c COLLECTION] [NAME_FILTER]
    An interactive command for rotating passwords of a collection one by one.
    TODO implement.

GLOBAL: ENCRYPTION

  hash generate [FORMAT] [CONTENT]
    Generates hash from the given content. Uses bcrypt by default.

  jwt decode TOKEN
    Decodes jwt contents

UTILS

  util browser URL
    Opens the given url in default web browser. You can use this command in
    your build scripts.

  util commit
    Commits current changes to the Taito CLI container. For example, you
    can start a shell running 'taito shell', make some changes and then
    commit all changes by running 'taito util commit' inside the container.

  util test:TARGET:ENV [SUITE_FILTER] [TEST_FILTER]
    Run test suites for the given container.
