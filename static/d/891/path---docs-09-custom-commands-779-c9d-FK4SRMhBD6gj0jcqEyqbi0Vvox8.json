{"data":{"markdownRemark":{"id":"f9a10cba-5a5f-521c-82dd-5cbae69b14e4","html":"<h2>9. Custom commands</h2>\n<p>You can run any script defined in your project root <em>package.json</em> or <em>Makefile</em> with Taito CLI. Just add some scripts to your file, and enable the <code class=\"language-text\">npm</code> or <code class=\"language-text\">make</code> plugin in your taito-config.sh. Thus, you can use <em>Taito CLI</em> with any project, even those that use technologies that are not supported by any of the existing Taito CLI plugins.</p>\n<p>When adding commands to your <em>package.json</em> or <em>Makefile</em>, you are encouraged to follow the predefined command set that is shown by running <code class=\"language-text\">taito -h</code>. The main idea behind <em>Taito CLI</em> is that the same predefined command set works from project to project, no matter the technology or infrastructure. For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&quot;taito-install&quot;: &quot;npm install &amp;&amp; ant retrieve&quot;,\n&quot;start&quot;: &quot;java -cp . com.domain.app.MyServer&quot;,\n&quot;init&quot;: &quot;host=localhost npm run _db -- &lt; dev-data.sql&quot;,\n&quot;init:clean&quot;: &quot;npm run clean &amp;&amp; npm run init&quot;,\n&quot;open-app&quot;: &quot;taito util-browser: http://localhost:8080&quot;,\n&quot;open-app:dev&quot;: &quot;taito util-browser: http://mydomain-dev:8080&quot;,\n&quot;info&quot;: &quot;echo admin/password, user/password&quot;,\n&quot;info:dev&quot;: &quot;echo admin/password, user/password&quot;,\n&quot;status:client&quot;: &quot;url=localhost/client npm run _status&quot;,\n&quot;status:server&quot;: &quot;url=localhost/server npm run _status&quot;,\n&quot;status:server:dev&quot;: &quot;url=mydomain-dev/client npm run _status&quot;,\n&quot;status:server:dev&quot;: &quot;url=mydomain-dev/server npm run _status&quot;,\n&quot;db-connect&quot;: &quot;host=localhost npm run _db&quot;,\n&quot;db-connect:dev&quot;: &quot;host=mydomain-dev npm run _db&quot;,\n&quot;db-connect:test&quot;: &quot;host=mydomain-test npm run _db&quot;,\n&quot;db-connect:stag&quot;: &quot;host=mydomain-stag npm run _db&quot;,\n&quot;db-connect:prod&quot;: &quot;host=mydomain-prod run _db&quot;,\n&quot;_db&quot;: &quot;mysql -u myapp -p myapp -h ${host}&quot;,</code></pre></div>\n<p>You can also override an existing Taito CLI command in your file by using <code class=\"language-text\">taito-</code> as script name prefix. For example the following npm script shows the init.txt file before running initialization implemented by Taito CLI plugins. The <code class=\"language-text\">-z</code> flag means that override is skipped when the npm script calls Taito CLI. You can use the optional <em>taito</em> prefix also for avoiding conflicts with existing script names.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&quot;taito-init&quot;: &quot;less init.txt; taito -z init&quot;</code></pre></div>\n<p>All npm commands are run inside Taito CLI by default. Use <code class=\"language-text\">taito-host-</code> prefix to run command on host instead:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&quot;taito-host-example&quot;: &quot;echo &#39;taito example&#39; command is run on host&quot;</code></pre></div>\n<p>Instead of implementing custom commands in <em>package.json</em> or <em>Makefile</em>, you can also implement a set of Taito CLI plugins for the infrastructure in question (see the next chapter).</p>\n<hr>\n<p><strong>Next:</strong> <a href=\"/docs/10-custom-plugins\">10. Custom plugins</a></p>"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"f9a10cba-5a5f-521c-82dd-5cbae69b14e4"}}