{"data":{"doc":{"id":"fc5df1c6-fcda-5d43-9ac0-46826f181003","html":"<h2>4. Usage</h2>\n<h3>The basics</h3>\n<p>Taito CLI is configured with a <code class=\"language-text\">taito-config.sh</code> file placed at your project root directory. You can execute taito commands anywhere in the project directory hierarchy, that is, at the project root directory or any of its subdirectories. When you are not located inside a project directory, only global Taito CLI plugins are enabled and therefore only a small subset of taito commands are enabled.</p>\n<p>Run <code class=\"language-text\">taito -h</code> to show a list of all predefined commands of Taito CLI and additional custom commands provided by currently enabled plugins. Run <code class=\"language-text\">taito COMMAND -h</code> to search for a command help; try for example <code class=\"language-text\">taito db -h</code>, <code class=\"language-text\">taito feat -h</code> or <code class=\"language-text\">taito env -h</code>. Write <code class=\"language-text\">taito</code> and hit tab, and you'll get autocompletion for taito commands, if you have installed the autocompletion support.</p>\n<p>Some of the plugins require authentication. If you encounter a connection or authorization error, run <code class=\"language-text\">taito auth:ENV</code> inside a project directory to authenticate in the context of a project environment (for example <code class=\"language-text\">taito auth:dev</code>). Note that your credentials are saved on the Taito CLI container image, as you don't need them lying on your host file system anymore.</p>\n<p><a href=\"https://github.com/TaitoUnited/taito-cli/tree/master/docs/tutorial/README\">Taito CLI tutorial</a> guides you through common software development scenarios in a chronological order. You may consider it as a chronological Taito CLI manual.</p>\n<p>See the <a href=\"https://github.com/TaitoUnited/server-template/blob/master/DEVELOPMENT\">DEVELOPMENT.md</a> of the <a href=\"https://github.com/TaitoUnited/server-template\">full-stack-template</a> as an example on how to use Taito CLI with your project.</p>\n<h3>Troubleshooting</h3>\n<p>Run <code class=\"language-text\">taito --trouble</code> to see troubleshooting.</p>\n<p>With the <code class=\"language-text\">-v</code> or <code class=\"language-text\">--verbose</code> flag (e.g. <code class=\"language-text\">taito -v db connect:dev</code>) you can see the commands that plugins run during command execution. If you want to see even more output, use the <code class=\"language-text\">--debug</code> flag.</p>\n<h3>Advanced usage</h3>\n<h4>Multiple organizations</h4>\n<p>If you work for multiple organizations, you may define organization specific overrides in <code class=\"language-text\">~/.taito/taito-config-ORGANIZATION.sh</code> file. You can use these setting with the <code class=\"language-text\">-o</code> option when you execute a command outside a project directory, for example <code class=\"language-text\">taito -o ORGANIZATION open intra</code>. The <code class=\"language-text\">-o</code> option is most useful combined with the <code class=\"language-text\">project create</code> command as it will tell Taito CLI to initialize the new project using the organization specific default settings, for example: <code class=\"language-text\">taito -o ORGANIZATION project create: full-stack-template</code>.</p>\n<h4>Project references</h4>\n<p>You can execute project specific commands also outside the project directory with the <code class=\"language-text\">-p</code> option, for example <code class=\"language-text\">taito -p my-project open logs:prod</code>. The command reads the <code class=\"language-text\">taito-config.sh</code> file directly from remote git repository, and therefore the git repository need not be cloned to your local disk. The <code class=\"language-text\">-p</code> options works only if you have configured <code class=\"language-text\">vc_organization</code> setting in you personal or organizational <code class=\"language-text\">taito-config.sh</code> file.</p>\n<h4>Running shell commands</h4>\n<p>You can easily run any shell command inside the Taito CLI container, for example: <code class=\"language-text\">taito -- kubectl get pods --namespace my-project-dev</code>. You can also start an interactive shell inside the container: <code class=\"language-text\">taito shell</code>. Thus, you never need to install any infrastructure specific tools on your own operating system.</p>\n<h4>Setting current context for shell commands</h4>\n<p>Running <code class=\"language-text\">taito auth:ENV</code> also sets the default context for currently enabled plugins. For example, if the kubectl plugin is enabled, you can run <code class=\"language-text\">taito auth:ENV</code> to set the default context for kubectl (Kubernetes cluster and namespace). After that you can execute a bunch of kubectl commands, and all of them will execute in the default context previously set by the auth command. For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">taito auth:dev\ntaito -- kubectl get secrets\ntaito -- kubectl get secret my-secret -o yaml</code></pre></div>\n<h4>Installing additional tools to local Taito CLI image</h4>\n<p>You can install additional tools to your local Taito CLI image:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">taito -r shell                             <span class=\"token comment\"># Start shell as root user</span>\n<span class=\"token function\">apt-get</span> update                             <span class=\"token comment\"># Retrieve new lists of packages</span>\n<span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> PACKAGE <span class=\"token punctuation\">[</span>PACKAGE <span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">]</span>      <span class=\"token comment\"># Install some packages</span>\ntaito util-commit                          <span class=\"token comment\"># Commit changes to the Taito CLI image</span>\n<span class=\"token keyword\">exit</span>                                       <span class=\"token comment\"># Exit Taito CLI shell</span></code></pre></div>\n<p>These changes are in effect until the next time you run <code class=\"language-text\">taito upgrade</code>. If you want to make permanent changes, put your installation scripts in <code class=\"language-text\">~/.taito/install.sh</code>. It will be run as root user during <code class=\"language-text\">taito upgrade</code>. Note that <code class=\"language-text\">/install</code> directory of Taito CLI image contains some reusable install scripts that you can also use in your <code class=\"language-text\">install.sh</code>.</p>\n<blockquote>\n<p>TODO: Implement install.sh support.</p>\n</blockquote>\n<h4>Building and distributing a customized Taito CLI image</h4>\n<p>You can use Docker Hub or some other container registry to build and distribute a custom Taito CLI image. This way you can make a customized Taito CLI image for your organization, or for your CI/CD pipeline.</p>\n<h4>Admin credentials</h4>\n<p>Many tools require you to authenticate only once and then you can run any command without supplying your password again. For this reason Taito CLI supports a separate admin account for accessing critical resources.</p>\n<p>With the <code class=\"language-text\">-a, --admin</code> option you specify that you would like to run the given command as admin. For example, you can authenticate as admin by running <code class=\"language-text\">taito -a auth:prod</code> and then execute a command as admin by running <code class=\"language-text\">taito -a status:prod</code>. Your admin credentials are stored in Taito CLI container image using <code class=\"language-text\">aes-256-cbc</code> encryption and you need to enter the decryption key every time you execute a command as admin. Keep the decryption key in a safe place.</p>\n<p>TODO support for U2F/YubiKey?</p>\n<hr>\n<p><strong>Next:</strong> <a href=\"/docs/05-configuration\">5. Configuration</a></p>"},"menu":{"edges":[{"node":{"id":"2b027433-6a58-52a1-be40-77a8b9d90bbb","headings":[{"value":"1. Introduction"}],"fields":{"slug":"/docs/01-introduction/"}}},{"node":{"id":"8e65c957-121e-5710-8cd9-25bcc970582e","headings":[{"value":"2. Installation and upgrade"}],"fields":{"slug":"/docs/02-installation/"}}},{"node":{"id":"d23fc3f3-90f5-5d4a-8e84-7c1df2e22706","headings":[{"value":"3. Quick start"}],"fields":{"slug":"/docs/03-quick-start/"}}},{"node":{"id":"fc5df1c6-fcda-5d43-9ac0-46826f181003","headings":[{"value":"4. Usage"}],"fields":{"slug":"/docs/04-usage/"}}},{"node":{"id":"38692359-aea8-589d-8942-9675abf88257","headings":[{"value":"5. Configuration"}],"fields":{"slug":"/docs/05-configuration/"}}},{"node":{"id":"dc734f9a-57ec-5a05-8a3d-0139d8fb7952","headings":[{"value":"6. Continuous integration and delivery"}],"fields":{"slug":"/docs/06-continuous-integration-and-delivery/"}}},{"node":{"id":"52d72360-81b4-51df-bcbe-7cdd53a97c99","headings":[{"value":"7. Infrastructure management"},{"value":"Creating a zone"}],"fields":{"slug":"/docs/07-infrastructure-management/"}}},{"node":{"id":"127dd890-053d-5afb-b264-d285bdd10b64","headings":[{"value":"8. ChatOps"}],"fields":{"slug":"/docs/08-chatops/"}}},{"node":{"id":"f9a10cba-5a5f-521c-82dd-5cbae69b14e4","headings":[{"value":"9. Custom commands"}],"fields":{"slug":"/docs/09-custom-commands/"}}},{"node":{"id":"0868a447-c5d2-5d9b-b19a-e00380febcb1","headings":[{"value":"10. Custom plugins"}],"fields":{"slug":"/docs/10-custom-plugins/"}}},{"node":{"id":"56c8224f-77fd-5b8e-9b0c-92a8b978765d","headings":[{"value":"11. Custom project templates"}],"fields":{"slug":"/docs/11-custom-project-templates/"}}},{"node":{"id":"c0a966b4-66e2-5535-bfa3-4b6a44833991","headings":[{"value":"12. Taito CLI development"}],"fields":{"slug":"/docs/12-taito-cli-development/"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"fc5df1c6-fcda-5d43-9ac0-46826f181003"}}