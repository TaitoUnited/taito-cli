{"componentChunkName":"component---src-templates-doc-js","path":"/docs/06-continuous-integration-and-delivery/","webpackCompilationHash":"bb53c8e1172a393a6ef1","result":{"data":{"doc":{"id":"baaa9cea-7557-5d89-ad83-25d234345dd1","html":"<h2 id=\"6-continuous-integration-and-delivery\"><a href=\"#6-continuous-integration-and-delivery\" aria-label=\"6 continuous integration and delivery permalink\" class=\"autolink-a\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6. Continuous integration and delivery</h2>\n<p>In most cases your CI/CD tool needs only to execute a bunch of simple Taito CLI commands to get the job done. Everything is already configured in taito-config.sh, and Taito CLI provides support for various infrastructures by plugins. This means that you can also easily run any of the CI/CD steps manually from command line using <em>Taito CLI</em>. A typical CI/CD process would consist of the following steps. Run <code class=\"language-text\">taito -h</code> to see decription of the commands.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token comment\"># Prepare build</span>\ntaito build prepare:<span class=\"token variable\">$BRANCH</span>\n\n<span class=\"token comment\"># Prepare all artifacts for deployment (execute in parallel)</span>\ntaito artifact prepare:client:<span class=\"token variable\">$BRANCH</span> <span class=\"token variable\">$COMMIT_SHA</span>\ntaito artifact prepare:server:<span class=\"token variable\">$BRANCH</span> <span class=\"token variable\">$COMMIT_SHA</span>\n\n<span class=\"token comment\"># Deploy the changes to target environment</span>\n<span class=\"token punctuation\">(</span>taito <span class=\"token function\">env</span> apply:<span class=\"token variable\">$BRANCH</span><span class=\"token punctuation\">)</span>\ntaito db deploy:<span class=\"token variable\">$BRANCH</span>\ntaito deployment deploy:<span class=\"token variable\">$BRANCH</span> <span class=\"token variable\">$COMMIT_SHA</span>\n\n<span class=\"token comment\"># Test and verify deployment</span>\ntaito deployment wait:<span class=\"token variable\">$BRANCH</span>\ntaito test:<span class=\"token variable\">$BRANCH</span>\ntaito deployment verify:<span class=\"token variable\">$BRANCH</span>\n\n<span class=\"token comment\"># Release all artifacts (execute in parallel)</span>\ntaito artifact release:client:<span class=\"token variable\">$BRANCH</span> <span class=\"token variable\">$COMMIT_SHA</span>\ntaito artifact release:server:<span class=\"token variable\">$BRANCH</span> <span class=\"token variable\">$COMMIT_SHA</span>\n\n<span class=\"token comment\"># Release build</span>\ntaito build release:<span class=\"token variable\">$BRANCH</span>\n\n<span class=\"token comment\"># ON FAIL: Revert deployment on fail</span>\ntaito deployment revert:<span class=\"token variable\">$BITBUCKET_BRANCH</span> <span class=\"token variable\">$COMMIT_SHA</span>\ntaito db revert:<span class=\"token variable\">$BITBUCKET_BRANCH</span> <span class=\"token variable\">$COMMIT_SHA</span></code></pre></div>\n<p>If you want your CI/CD to do more that it currently does, try not to add more CI/CD steps. Instead, enable plugins or add custom commands that do additional operations within the current CI/CD steps. This way CI/CD scripts remain reusable and CI/CD pipeline consists of standard steps that can be easily run either automatically or manually. For example, if you want to do something extra at the end of the CI/CD script, just enable some plugin that executes the additional operation on <code class=\"language-text\">taito build release</code>, or add a custom command to your package.json (e.g. <code class=\"language-text\">&quot;build-release&quot;: &quot;echo &#39;Do something extra&#39;&quot;</code>).</p>\n<h3 id=\"cicd-optimized-docker-images\"><a href=\"#cicd-optimized-docker-images\" aria-label=\"cicd optimized docker images permalink\" class=\"autolink-a\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CI/CD optimized Docker images</h3>\n<p>Taito CLI <a href=\"https://hub.docker.com/r/taitounited/taito-cli/\">docker repository</a> provides the following stable Docker images optimized for CI/CD:</p>\n<ul>\n<li><code class=\"language-text\">ci</code>: CI/CD image without any cloud provider specific tools.</li>\n<li><code class=\"language-text\">ci-aws</code>: CI/CD image for <strong>Amazon Web Services</strong>.</li>\n<li><code class=\"language-text\">ci-azure</code>: CI/CD image for <strong>Microsoft Azure</strong> (TODO).</li>\n<li><code class=\"language-text\">ci-gcp</code>: CI/CD image for <strong>Google Cloud Platform</strong>.</li>\n<li><code class=\"language-text\">ci-do</code>: CI/CD image for <strong>Digital Ocean</strong> (TODO).</li>\n<li><code class=\"language-text\">ci-all</code>: CI/CD image that includes tools for all cloud providers.</li>\n</ul>\n<p>If your CI/CD pulls the whole Docker image on each build, optimize the image pull by setting up caching on your CI/CD, or by using your own Docker registry as a mirror. You can also create a custom Docker image, that includes only the tools that you actually need.</p>\n<h3 id=\"deployment-to-multiple-platforms\"><a href=\"#deployment-to-multiple-platforms\" aria-label=\"deployment to multiple platforms permalink\" class=\"autolink-a\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Deployment to multiple platforms</h3>\n<p>You can deploy the same application to multiple platforms. For example, your development and testing environments may reside on Google Cloud Platform to enable easy access for external personnel. \tFurthermore, your staging, canary, and production environments may reside on-premises to fulfill extra security requirements. Deployment settings are configured in the project specific <code class=\"language-text\">taito-config.sh</code> file.</p>\n<p>You may even deploy the same git branch simultaneously to multiple platforms. Just define path to a configuration overrides file in your CI/CD script with the <code class=\"language-text\">TAITO_CONFIG_OVERRIDE</code> environment variable, and it will be included in the <code class=\"language-text\">taito-config.sh</code> file just before <code class=\"language-text\">taito-provider-config.sh</code>. The file may be either local file (e.g. <code class=\"language-text\">./my-overrides.sh</code>) or remote (e.g. <code class=\"language-text\">https://mydomain.com/configs/my-overrides.sh</code>).</p>\n<h3 id=\"cicd-without-taito-cli\"><a href=\"#cicd-without-taito-cli\" aria-label=\"cicd without taito cli permalink\" class=\"autolink-a\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CI/CD without Taito CLI</h3>\n<p>If you for some reason cannot use Taito CLI in your CI/CD pipeline, you can easily implement the CI/CD steps yourself. First run each step manually with the verbose option (<code class=\"language-text\">taito -v</code>) to see the commands that Taito CLI executes under the hood. Then implement your CI/CD script based on those commands. You can also use <code class=\"language-text\">taito-config.sh</code> environment variables in your CI/CD script:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">taito_target_env</span><span class=\"token operator\">=</span><span class=\"token variable\">${BRANCH<span class=\"token operator\">/</span>master<span class=\"token operator\">/</span>prod}</span>\n<span class=\"token builtin class-name\">.</span> taito-config.sh</code></pre></div>\n<p>Note that the CI/CD process may slightly differ depending on environment. On dev and feature environments the artifacts are usually tagged using <code class=\"language-text\">untested</code> suffix, and on prod environment some additional steps are taken during <code class=\"language-text\">taito build release</code> to generate release notes, etc.</p>\n<hr>\n<p><strong>Next:</strong> <a href=\"/taito-cli/docs/07-infrastructure-management\">7. Infrastructure management</a></p>"},"menu":{"edges":[{"node":{"id":"f400bc83-9ebc-5d6d-9250-c7a634369bef","headings":[{"value":"1. Introduction"}],"fields":{"slug":"/docs/01-introduction/"}}},{"node":{"id":"9d05f935-d824-5ab8-b96c-babf2c8922df","headings":[{"value":"2. Installation and upgrade"}],"fields":{"slug":"/docs/02-installation/"}}},{"node":{"id":"6fb3b66e-a3e1-5ed7-ae54-fc8b33df41e8","headings":[{"value":"3. Quick start"}],"fields":{"slug":"/docs/03-quick-start/"}}},{"node":{"id":"041224e2-88ee-50c0-a7b5-0ae314fc3ea8","headings":[{"value":"4. Usage"}],"fields":{"slug":"/docs/04-usage/"}}},{"node":{"id":"04f76315-d11a-523b-9238-3c3f4162b776","headings":[{"value":"5. Configuration"}],"fields":{"slug":"/docs/05-configuration/"}}},{"node":{"id":"baaa9cea-7557-5d89-ad83-25d234345dd1","headings":[{"value":"6. Continuous integration and delivery"}],"fields":{"slug":"/docs/06-continuous-integration-and-delivery/"}}},{"node":{"id":"2a328525-4733-5f6b-acc4-4b0f387d4c1a","headings":[{"value":"7. Infrastructure management"},{"value":"Creating a zone"}],"fields":{"slug":"/docs/07-infrastructure-management/"}}},{"node":{"id":"dcbd0c2a-ed28-5cc5-a6ff-867d1630692a","headings":[{"value":"8. ChatOps"}],"fields":{"slug":"/docs/08-chatops/"}}},{"node":{"id":"f70c271d-23f5-5b80-afc9-54877ce7f1a8","headings":[{"value":"9. Custom commands"}],"fields":{"slug":"/docs/09-custom-commands/"}}},{"node":{"id":"b1c65647-6969-5cfd-939f-c879a29cb7d2","headings":[{"value":"10. Custom plugins"}],"fields":{"slug":"/docs/10-custom-plugins/"}}},{"node":{"id":"53cb6168-f232-5b22-a7a2-0c3e398f2bfe","headings":[{"value":"11. Custom project templates"}],"fields":{"slug":"/docs/11-custom-project-templates/"}}},{"node":{"id":"ca612711-1911-5eae-82ec-e05a5174ec48","headings":[{"value":"12. Taito CLI development"}],"fields":{"slug":"/docs/12-taito-cli-development/"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"baaa9cea-7557-5d89-ad83-25d234345dd1"}}}