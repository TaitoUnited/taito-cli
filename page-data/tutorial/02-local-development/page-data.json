{"componentChunkName":"component---src-templates-tutorial-js","path":"/tutorial/02-local-development/","result":{"data":{"tutorial":{"id":"e5ce407d-020a-57e2-b740-1f5fa271fd2b","html":"<h2 id=\"2-local-development\" style=\"position:relative;\"><a href=\"#2-local-development\" aria-label=\"2 local development permalink\" class=\"autolink-a before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Local development</h2>\n<h3 id=\"21-start-the-application\" style=\"position:relative;\"><a href=\"#21-start-the-application\" aria-label=\"21 start the application permalink\" class=\"autolink-a before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.1. Start the application</h3>\n<p>The template uses Docker Compose to run your application. All parts of the application, including the database, are run inside containers so that the running environment closely resembles the actual production environment.</p>\n<p>Start the application with the following commands:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">taito develop       <span class=\"token comment\"># Clean start local development environment</span>\n                    <span class=\"token comment\"># (Runs 'taito env apply --clean', 'taito start --clean', 'taito init')</span>\ntaito <span class=\"token function\">open</span> client   <span class=\"token comment\"># Open application web user interface</span>\ntaito info          <span class=\"token comment\"># Show info required for signing in to the application</span></code></pre></div>\n<p>Installation and starting up takes some time the first time you run the commands, as Docker containers and npm libraries need to be downloaded first. While waiting, browse through the <a href=\"https://github.com/TaitoUnited/full-stack-template/blob/master/scripts/taito/DEVELOPMENT.md#quick-start\">Quick start</a> section of the DEVELOPMENT.md file to get a quick overview of the Taito CLI commands.</p>\n<h3 id=\"22-configure-your-editor\" style=\"position:relative;\"><a href=\"#22-configure-your-editor\" aria-label=\"22 configure your editor permalink\" class=\"autolink-a before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.2. Configure your editor</h3>\n<p>The template comes with some strict linting and formatting rules. You should make sure that your editor is configured to show compile and lint error messages so that you don't need to look at the console output all the time. Your editor should also be able to automatically format code on save. You most have to install at least Pretties plugin on your editor to achieve this, perhaps also some additional TypeScript and ESLint plugins.</p>\n<p>Some links:</p>\n<ul>\n<li><a href=\"https://prettier.io/docs/en/editors.html\">Prettier</a></li>\n<li><a href=\"https://eslint.org/docs/user-guide/integrations#editors\">ESLint</a></li>\n</ul>\n<h3 id=\"23-typescript-vs-javascript\" style=\"position:relative;\"><a href=\"#23-typescript-vs-javascript\" aria-label=\"23 typescript vs javascript permalink\" class=\"autolink-a before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.3. TypeScript vs JavaScript</h3>\n<p>The template comes with TypeScript by default. Many tutorials, however, are written in JavaScript.</p>\n<p>If you would like write TypeScript that closely resembles JavaScript, you can disable the <code class=\"language-text\">noImplicitAny</code> setting in <code class=\"language-text\">tsconfig.json</code> files:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\n    \"compilerOptions\": {\n        \"noImplicitAny\": false,\n        ...\n    },\n}</code></pre></div>\n<p>Alternatively, if you would like to write plain JavaScript (*.js), you can enable JavaScript in <code class=\"language-text\">tsconfig.json</code> files (TODO does allowJs support ES6/7?):</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\n    \"compilerOptions\": {\n        \"allowJs\": true,\n        ...\n    },\n}</code></pre></div>\n<h3 id=\"24-implement-a-new-page-with-react\" style=\"position:relative;\"><a href=\"#24-implement-a-new-page-with-react\" aria-label=\"24 implement a new page with react permalink\" class=\"autolink-a before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.4. Implement a new page with React</h3>\n<p>Make up some simple idea that you would like to implement, and add a new empty page for it. If you don't come up with any idea yourself, just reimplement the posts page that lets you add new posts, but replace posts with articles. Don't worry about API or database for now. Just implement a dummy user interface that works, but doesn't actually store data anywhere permanently.</p>\n<p>If you are not yet familiar with <a href=\"https://reactjs.org/\">React</a>, you should implement the UI state management using only functionality that React provides out-of-the-box. <a href=\"a-technology-tutorials\">Appendix A: Technology tutorials</a> provides some tips and other resources that might be useful while learning React, HTML and CSS. If you already know React, you may choose to use additional libraries like <a href=\"https://redux.js.org/\">Redux</a> and <a href=\"https://redux-saga.js.org/.md\">redux-saga</a> for managing state and side effects.</p>\n<p>The application is built automatically in the background when you make changes. If build fails for some reason, you should see errors on your command line console. You should see the same errors also on your editor, if your editor has been configured properly.</p>\n<p>You can debug the implementation with your web browser. <a href=\"https://developers.google.com/web/tools/chrome-devtools/\">Chrome DevTools</a> is a set of web developer tools built directly into the Google Chrome browser. Other web browsers include similar tools also. These tools let you examine generated HTML, change CSS styles directly in browser, and debug implementation by setting breakpoints and executing code line by line in browser. Note that you can find source code of your UI implementation under the webpack folder: <strong>Chrome DevTools</strong> -> <strong>Sources tab</strong> -> <strong>webpack://</strong> -> <strong>.</strong> -> <strong>src</strong>. See <a href=\"/taito-cli/tutorial/a-technology-tutorials#browser-extensions\">appendix A</a> for some additional browser extensions that might also be useful.</p>\n<blockquote>\n<p>If web development is new for you and you are insterested in it, just take your time learning the web development basics before continuing the Taito CLI tutorial.</p>\n</blockquote>\n<h3 id=\"25-add-a-new-npm-library-dependency\" style=\"position:relative;\"><a href=\"#25-add-a-new-npm-library-dependency\" aria-label=\"25 add a new npm library dependency permalink\" class=\"autolink-a before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.5. Add a new npm library dependency</h3>\n<p>Add some npm library to the dependencies section of the <code class=\"language-text\">client/package.json</code>. Install the new libraries locally by running <code class=\"language-text\">taito install</code> (or <code class=\"language-text\">taito env apply</code>). Restart the client container with <code class=\"language-text\">taito restart:client</code>. Now you should be able to use the npm library in your implementation.</p>\n<h3 id=\"26-commit-and-push-changes-to-git\" style=\"position:relative;\"><a href=\"#26-commit-and-push-changes-to-git\" aria-label=\"26 commit and push changes to git permalink\" class=\"autolink-a before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.6. Commit and push changes to git</h3>\n<p>Once in a while commit and push your changes to git. You can do this either with a GUI tool of some sort (e.g. your code editor), with git commands, or with the following taito commands.</p>\n<p>Committing changes to a local git repository:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">taito stage           <span class=\"token comment\"># Add all changed files to staging area</span>\ntaito commit          <span class=\"token comment\"># Commit all staged changes to the local git repository</span></code></pre></div>\n<p>Pulling changes from and pushing changes to a remote git repository:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">taito pull            <span class=\"token comment\"># Pull changes from remote git repository using rebase and autostash</span>\ntaito push            <span class=\"token comment\"># Push changes to remote git repository</span></code></pre></div>\n<p>For now, you should commit all your changes to the dev branch that is checked out by default. You should also write commit messages in the following format: <code class=\"language-text\">wip(articles): my short lowercase message</code>. Branches and commit message conventions are explained later in chapter <a href=\"/taito-cli/tutorial/03-version-control\">3. Version control</a>.</p>\n<h3 id=\"27-add-a-database-table\" style=\"position:relative;\"><a href=\"#27-add-a-database-table\" aria-label=\"27 add a database table permalink\" class=\"autolink-a before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.7. Add a database table</h3>\n<p>Your implementation needs to store some data permanently. For this, you create 1-N database tables to PostgreSQL database. You add a new database table by adding a new database migration. You can do this with the following commands:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">taito db <span class=\"token function\">add</span> article -n <span class=\"token string\">'add article table'</span>     <span class=\"token comment\"># Add migration</span>\nEDIT database/deploy/article.sql                <span class=\"token comment\"># Edit deploy script</span>\nEDIT database/revert/article.sql                <span class=\"token comment\"># Edit revert script</span>\nEDIT database/verify/article.sql                <span class=\"token comment\"># Edit verify script</span>\ntaito init                                      <span class=\"token comment\"># Deploy to local db</span></code></pre></div>\n<p>If you modify the <code class=\"language-text\">deploy/article.sql</code> after you have already deployed it, you have to deploy the changes with the <code class=\"language-text\">--clean</code> option:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">taito init --clean</code></pre></div>\n<p>The <em>deploy.sql</em> script creates a database table, the <em>verify.sql</em> script verifies that the database table exists, and the <em>revert.sql</em> script reverts the changes by dropping the database table. You can find example deploy, revert and verify scripts in the <code class=\"language-text\">database/</code> directory. These migration scripts will be run automatically by <a href=\"https://en.wikipedia.org/wiki/CI/CD\">CI/CD pipeline</a> when the application is deployed to different environments (e.g. local, development, testing, user acceptance testing, staging, canary, production).</p>\n<p>Migrations are executed with Sqitch. See <a href=\"https://metacpan.org/pod/sqitchtutorial\">Sqitch tutorial for PostgreSQL</a> if you need further instructions on editing the migration scripts. See <a href=\"/taito-cli/tutorial/a-technology-tutorials#sql-and-relational-databases\">appendix A</a> for some SQL and relational database tutorials.</p>\n<h3 id=\"28-add-some-example-data-to-database\" style=\"position:relative;\"><a href=\"#28-add-some-example-data-to-database\" aria-label=\"28 add some example data to database permalink\" class=\"autolink-a before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.8. Add some example data to database</h3>\n<p>Often it's a good idea to add some example data to database, as it makes development and testing easier. Folder <code class=\"language-text\">database/data/</code> contains example data for each environment. Try to add some example data to the newly created database table(s) with the following commands:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">EDIT database/data/local.sql   <span class=\"token comment\"># Modify data used for local environment</span>\ntaito init --clean             <span class=\"token comment\"># Populate all migrations and init data to local database</span></code></pre></div>\n<p>Note that <code class=\"language-text\">taito init --clean</code> erases all existing data from your local database. If you don't want that, you can alternatively run <code class=\"language-text\">taito init</code> and ignore all the <strong>already exists</strong> error messages.</p>\n<blockquote>\n<p>TODO: note about remote environments and <code class=\"language-text\">taito init:dev --clean</code>.</p>\n</blockquote>\n<h3 id=\"29-connect-to-the-local-database\" style=\"position:relative;\"><a href=\"#29-connect-to-the-local-database\" aria-label=\"29 connect to the local database permalink\" class=\"autolink-a before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.9. Connect to the local database</h3>\n<p>Connect to your local database and check that the example data exists there. You can do this with the following commands:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">taito db connect        <span class=\"token comment\"># Connect to the local database</span>\n<span class=\"token punctuation\">\\</span>dt                     <span class=\"token comment\"># Show all database tables (postgres)</span>\n<span class=\"token keyword\">select</span> * from article<span class=\"token punctuation\">;</span>  <span class=\"token comment\"># Show all articles (SQL command)</span>\n<span class=\"token punctuation\">\\</span>?                      <span class=\"token comment\"># Show help for all backslash commands (postgres)</span>\n<span class=\"token punctuation\">\\</span>q                      <span class=\"token comment\"># Quit (postgres)</span></code></pre></div>\n<p>If you are not yet familiar with SQL, you should try to execute also some additional SQL commands just for the fun of it. See <a href=\"/taito-cli/tutorial/a-technology-tutorials#sql-and-relational-databases\">appendix A</a> for some SQL tutorials.</p>\n<blockquote>\n<p>TIP: If you have installed some database GUI tool, you can run <code class=\"language-text\">taito db proxy</code> to display database connection details and you can use those details to connect to the local database.</p>\n</blockquote>\n<h3 id=\"210-modify-an-existing-database-table\" style=\"position:relative;\"><a href=\"#210-modify-an-existing-database-table\" aria-label=\"210 modify an existing database table permalink\" class=\"autolink-a before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.10. Modify an existing database table</h3>\n<p>Normally all database changes must be made using database migrations (option a). However, if you are modifying a database table that does not exist in production environment yet, you can keep the scripts located in <code class=\"language-text\">database/deploy/</code> cleaner by modifying them directly (option b). Try the both approaches:</p>\n<h4 id=\"a-with-migrations\" style=\"position:relative;\"><a href=\"#a-with-migrations\" aria-label=\"a with migrations permalink\" class=\"autolink-a before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>a) With migrations</h4>\n<p>Add a new column to your newly created database table as a new database migration. You do this just like you added the database table, but this time you use <code class=\"language-text\">ALTER TABLE</code> clause instead of <code class=\"language-text\">CREATE TABLE</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">taito db <span class=\"token function\">add</span> article-foobar -n <span class=\"token string\">'add foobar column to article table'</span>     <span class=\"token comment\"># Add migration</span>\nEDIT database/deploy/article-foobar.sql                                 <span class=\"token comment\"># Edit deploy script</span>\nEDIT database/revert/article-foobar.sql                                 <span class=\"token comment\"># Edit revert script</span>\nEDIT database/verify/article-foobar.sql                                 <span class=\"token comment\"># Edit verify script</span>\ntaito init                                                              <span class=\"token comment\"># Deploy to local db</span></code></pre></div>\n<p>The <em>deploy.sql</em> script creates the column, the <em>verify.sql</em> script verifies that the column exists, and the <em>revert.sql</em> script reverts the changes by dropping the column. You can find example deploy, revert and verify scripts in the <code class=\"language-text\">database/</code> directory. Note that you can also add multiple columns in a single migration script, if necessary. See <a href=\"https://metacpan.org/pod/sqitchtutorial\">Sqitch tutorial for PostgreSQL</a> if you need further instructions.</p>\n<p>The upside of this approach is that the new column is deployed to all environments automatically. Other developers need to run <code class=\"language-text\">taito init</code> manually, but <code class=\"language-text\">taito init --clean</code> is not required, and therefore all data is preserved.</p>\n<p>TODO example: posts-images</p>\n<h4 id=\"b-by-modifying-existing-scripts\" style=\"position:relative;\"><a href=\"#b-by-modifying-existing-scripts\" aria-label=\"b by modifying existing scripts permalink\" class=\"autolink-a before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>b) By modifying existing scripts</h4>\n<p>Add a new column to your newly created database table by modifying the existing deploy script directly:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">EDIT database/deploy/article.sql   <span class=\"token comment\"># Edit deploy script</span>\ntaito init --clean                 <span class=\"token comment\"># Deploy to local db</span></code></pre></div>\n<p>The downside of this approach is that the <code class=\"language-text\">taito init:ENV --clean</code> command deletes all existing data from database, and the command must be run manually to all environments that already contain the database table that was modified.</p>\n<h3 id=\"211-implement-api\" style=\"position:relative;\"><a href=\"#211-implement-api\" aria-label=\"211 implement api permalink\" class=\"autolink-a before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.11. Implement API</h3>\n<p>Your UI implementation needs to access the data located in database. However, accessing database directly from UI is a bad approach for many reasons. Therefore you need to implement an API that exists between the UI and the database:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">UI <span class=\"token punctuation\">(</span>on browser<span class=\"token punctuation\">)</span>  -<span class=\"token operator\">></span>  API <span class=\"token punctuation\">(</span>on server<span class=\"token punctuation\">)</span>  -<span class=\"token operator\">></span>  database</code></pre></div>\n<p>The API should be stateless. That is, the API implementation should not keep any state in memory or on local disk between requests. This is explained in more detail in <a href=\"/taito-cli/tutorial/b-software-design#api-design\">appendix B</a>.</p>\n<p>TODO: Some tips for debugging.</p>\n<h4 id=\"a-graphql-api\" style=\"position:relative;\"><a href=\"#a-graphql-api\" aria-label=\"a graphql api permalink\" class=\"autolink-a before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>a) GraphQL API</h4>\n<p>The template supports <a href=\"https://github.com/TaitoUnited/full-stack-template/blob/master/scripts/taito/DEVELOPMENT.md#code-generation\">GraphQL API code generation</a>. Read the instructions.</p>\n<ul>\n<li>Run <code class=\"language-text\">taito code generate article</code> to generate code for the <strong>article</strong> table.</li>\n<li>Make sure also <strong>shared/schema.gql</strong> was updated. If not, either there are some compile errors that you need to fix or your server is not running, in which case you should try <code class=\"language-text\">taito restart:server</code>.</li>\n<li>Run <code class=\"language-text\">taito init</code> to generate example GraphQL queries.</li>\n<li>Run <code class=\"language-text\">taito open graphql</code> to open GraphQL playground on your browser. Try to execute posts and articles queries. You can copy them from <strong>server/test/graphql/generated/queries</strong>.</li>\n</ul>\n<p>See <a href=\"/taito-cli/tutorial/a-technology-tutorials#graphql-api\">appendix A</a> for some GraphQL API tutorials.</p>\n<h4 id=\"b-restful-api\" style=\"position:relative;\"><a href=\"#b-restful-api\" aria-label=\"b restful api permalink\" class=\"autolink-a before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>b) RESTful API</h4>\n<p>The template supports also RESTful APIs. There is one example at <a href=\"https://github.com/TaitoUnited/full-stacl-template/tree/master/server/src/infra/routers/InfraRouter.ts\">InfraRouter.ts</a>. You can implement a RESTful API endpoint at <strong>server/src/core/routers/ArticleRouter.ts</strong> if you wish. In a RESTful API a HTTP URL (e.g <em>/articles</em>) defines a resource, and HTTP methods (GET, POST, PUT, PATCH, DELETE) operate on that resource. For example:</p>\n<ul>\n<li><code class=\"language-text\">GET /articles</code>: Fetch all articles from the articles collection</li>\n<li><code class=\"language-text\">POST /articles</code>: Create a new article to the articles collection</li>\n<li><code class=\"language-text\">GET /articles/432</code>: Read article 432</li>\n<li><code class=\"language-text\">PUT /articles/432</code>: Update article 432 (all fields)</li>\n<li><code class=\"language-text\">PATCH /articles/432</code>: Update article 432 (only given fields)</li>\n<li><code class=\"language-text\">DELETE /articles/432</code>: Delete article 432</li>\n</ul>\n<p>See <a href=\"/taito-cli/tutorial/a-technology-tutorials#restful-api\">appendix A</a> for some RESTful API tutorials.</p>\n<h3 id=\"212-use-environment-variables-for-configuration\" style=\"position:relative;\"><a href=\"#212-use-environment-variables-for-configuration\" aria-label=\"212 use environment variables for configuration permalink\" class=\"autolink-a before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.12. Use environment variables for configuration</h3>\n<p>Your implementation will be run in many other environments in addition to your local environment (testing environment and production environment, for example). Some settings, like database settings, change depending on the environment. You can define these settings with environment variables.</p>\n<ol>\n<li>Add a new environment variable for server container in <code class=\"language-text\">docker-compose.yaml</code> and restart Docker Compose with <strong>CTRL+C</strong> and <code class=\"language-text\">taito start</code>.</li>\n<li>Add the new environment variable to <code class=\"language-text\">server/src/common/setup/config.ts</code>.</li>\n<li>Try using the environment variable in your server implementation. For example add the environment variable to the <code class=\"language-text\">/config</code> endpoint in <code class=\"language-text\">server/src/infra/routers/InfraRouter.ts</code> and see if <code class=\"language-text\">/api/config</code> endpoint returns the configured value to your browser.</li>\n<li>Add the environment variable also to <code class=\"language-text\">scripts/helm.yaml</code>. The helm.yaml file is used for Kubernetes running on remote environments, but you should add the environment variable right away, so that you don't forget to do it later. You can use <code class=\"language-text\">TODO</code> as value, if you don't know the correct value yet.</li>\n</ol>\n<p>Note that you should not use environment variables to define passwords or other secrets. Configuring remote environments and secrets are explained in part II of the tutorial.</p>\n<h3 id=\"213-use-3rd-party-services-and-define-secrets\" style=\"position:relative;\"><a href=\"#213-use-3rd-party-services-and-define-secrets\" aria-label=\"213 use 3rd party services and define secrets permalink\" class=\"autolink-a before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.13. Use 3rd party services and define secrets</h3>\n<p>You should not worry about 3rd party services and secrets for now. These are explained in part II of the tutorial.</p>\n<h3 id=\"214-store-files-to-object-storage\" style=\"position:relative;\"><a href=\"#214-store-files-to-object-storage\" aria-label=\"214 store files to object storage permalink\" class=\"autolink-a before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.14. Store files to object storage</h3>\n<p>TODO: As noted previously, no local disk.</p>\n<p>TODO: <a href=\"https://cloud.google.com/storage/docs/access-control/signing-urls-manually\">https://cloud.google.com/storage/docs/access-control/signing-urls-manually</a>\nTODO: minio -> S3 compatible (google cloud, etc.)</p>\n<h3 id=\"215-use-transactions-to-preserve-data-integrity\" style=\"position:relative;\"><a href=\"#215-use-transactions-to-preserve-data-integrity\" aria-label=\"215 use transactions to preserve data integrity permalink\" class=\"autolink-a before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.15. Use transactions to preserve data integrity</h3>\n<p>Data changes made by a service should be atomic to preserve data integrity. That is, if GraphQL mutation or RESTful API endpoint modifies data located in multiple database tables, either all data updates should be completed or none of them should.</p>\n<h4 id=\"a-transactions-with-a-relational-database\" style=\"position:relative;\"><a href=\"#a-transactions-with-a-relational-database\" aria-label=\"a transactions with a relational database permalink\" class=\"autolink-a before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>a) Transactions with a relational database</h4>\n<p>With relational databases you can use transactions to achieve atomicity. The full-stack-template starts a transaction automatically for all GraphQL requests containing mutations and all RESTful POST, PUT, PATCH and DELETE requests (see <code class=\"language-text\">server/src/infra/middlewares/dbTransactionMiddleware.ts</code>). This is a good default for most cases. See chapter <a href=\"/taito-cli/tutorial/09-full-stack-template-specific\">10. full-stack-template specific details</a> if you'd like to know how to customize your transactions.</p>\n<p>Try if transactions work like they should:</p>\n<ol>\n<li>Add few posts using the UI. Also check that they appear in the database: <code class=\"language-text\">taito db connect</code>, <code class=\"language-text\">select * from post order by created_at desc</code></li>\n<li>\n<p>Edit <code class=\"language-text\">PostService.ts</code> and add a line that throws an error after post has been added to database:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">const createdPost <span class=\"token operator\">=</span> this.postDao.create<span class=\"token punctuation\">(</span>state.tx, post<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>true<span class=\"token punctuation\">)</span> throw new Error<span class=\"token punctuation\">(</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin class-name\">return</span> createdPost<span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>Try adding some posts on the UI. You should notice that new posts won't appear in database even though the error is thrown only after each post is created.</li>\n</ol>\n<h4 id=\"b-transactions-and-multiple-systems\" style=\"position:relative;\"><a href=\"#b-transactions-and-multiple-systems\" aria-label=\"b transactions and multiple systems permalink\" class=\"autolink-a before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>b) Transactions and multiple systems</h4>\n<p>Using a database transaction does not always suffice if an operation makes data changes to multiple systems. However, if only two systems are involved (e.g. database + object storage), you can often mitigate this issue just by executing the updates in a correct order. You should make all database updates first and only then write data to object storage. This way database updates will be rolled back automatically if the object storage write fails. In a more complex scenario, you might need to catch some errors yourself and revert data changes manually.</p>\n<p>Try this yourself by modifying the implementation that you made in exercise 2.10. Try both 1. and 2., and see how they behave when an error occurs during either database update or object storage write:</p>\n<ul>\n<li>\n<ol>\n<li>write to database, write to object storage</li>\n</ol>\n</li>\n<li>\n<ol start=\"2\">\n<li>write to object storage, write to database</li>\n</ol>\n</li>\n</ul>\n<blockquote>\n<p>Some systems support distributed transactions. That is, you can make changes to multiple systems at once, and all of them engage to the same transaction. Distributed transactions come with extra complexity and are rarely needed for simple systems.</p>\n</blockquote>\n<h3 id=\"216-automatic-testing\" style=\"position:relative;\"><a href=\"#216-automatic-testing\" aria-label=\"216 automatic testing permalink\" class=\"autolink-a before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.16. Automatic testing</h3>\n<p>Test scripts are run automatically by <a href=\"https://en.wikipedia.org/wiki/CI/CD\">CI/CD pipeline</a> when the application is deployed to different environments (e.g. local, development, testing, user acceptance testing, staging, canary, production). You can also run these tests manually with the following commands:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">taito unit                  <span class=\"token comment\"># Run all unit tests</span>\ntaito <span class=\"token builtin class-name\">test</span>                  <span class=\"token comment\"># Run all UI and API tests against locally running application</span></code></pre></div>\n<p>You can also run a certain subset of tests:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">taito unit:client           <span class=\"token comment\"># Run unit tests of client</span>\ntaito unit:server           <span class=\"token comment\"># Run unit tests of server</span>\ntaito test:server           <span class=\"token comment\"># Run all API tests of server against locally running application</span>\ntaito test:client cypress   <span class=\"token comment\"># Run all cypress UI tests of client against locally running application</span></code></pre></div>\n<p>You can run UI and API tests also against remote environments, but this is explained in chapter <a href=\"/taito-cli/tutorial/05-remote-environments\">5. Remote environments</a>.</p>\n<p>You should not test implementation in your test scripts. Instead, you should always find some kind of 'public API' that is designed not to change very often, and test behaviour of that API. Here public API can be provided by a class, module, library, service or UI for example. This way you can make changes to the underlying implementation, and the existing tests protect you from breaking anything.</p>\n<blockquote>\n<p>TODO: TDD or not, prototyping at beginning of the project\nTODO: Running tests in production</p>\n</blockquote>\n<h4 id=\"a-create-user-interface-test\" style=\"position:relative;\"><a href=\"#a-create-user-interface-test\" aria-label=\"a create user interface test permalink\" class=\"autolink-a before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>a) Create user interface test</h4>\n<p>full-stack-template uses <a href=\"https://www.cypress.io/\">Cypress</a> for automatic user interface tests.</p>\n<ol>\n<li>Open the Cypress UI with <code class=\"language-text\">taito cypress:client</code> and run all existing Cypress tests by pressing the <code class=\"language-text\">Run all specs</code> -button.</li>\n<li>\n<p>Create tests for you UI. See the <code class=\"language-text\">client/test/integration/posts.spec.js</code> as an example. The following resources provide some useful instructions for writing Cypress tests:</p>\n<ul>\n<li><a href=\"https://docs.cypress.io/guides/getting-started/writing-your-first-test.html\">writing-your-first-test</a></li>\n<li><a href=\"https://docs.cypress.io/guides/references/best-practices.html\">best-practices</a></li>\n</ul>\n</li>\n</ol>\n<blockquote>\n<p>TIP: By default, Cypress tests are end-to-end tests. That is, they test functionality all the way from the UI to the database. This is not always a good thing. Your tests may become fragile if they are dependent on 3rd party services or on data that you cannot easily control during the test run. Your tests may also perform poorly, and you easily test the same functionality twice if you already have API tests in place. See <a href=\"https://docs.cypress.io/guides/guides/network-requests.html\">Network Requests\n</a> for more information.</p>\n</blockquote>\n<h4 id=\"b-create-api-test\" style=\"position:relative;\"><a href=\"#b-create-api-test\" aria-label=\"b create api test permalink\" class=\"autolink-a before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>b) Create API test</h4>\n<p>The api test examples use <a href=\"https://jestjs.io\">Jest</a> as testing framework.</p>\n<ol>\n<li>Run all existing API tests with <code class=\"language-text\">taito test:server</code>.</li>\n<li>\n<p>Create some tests for your API. See examples at <strong>server/test/core</strong>. The following resources provide some useful instructions for writing tests:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">TODO</code></pre></div>\n</li>\n</ol>\n<h4 id=\"c-create-unit-test\" style=\"position:relative;\"><a href=\"#c-create-unit-test\" aria-label=\"c create unit test permalink\" class=\"autolink-a before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>c) Create unit test</h4>\n<p>The full-stack-template differentiates unit tests from all other tests by using <code class=\"language-text\">unit</code> as filename suffix instead of <code class=\"language-text\">test</code>. A unit test does not require a running environment. That is, no database or external services are involved as unit test typically tests only a bunch of code. You can achieve this by <a href=\"TODO-link\">mocking</a>. TODO mock link.</p>\n<p>The unit test examples use <a href=\"https://jestjs.io\">Jest</a> as testing framework.</p>\n<ol>\n<li>Run all existing unit tests with <code class=\"language-text\">taito unit</code>.</li>\n<li>\n<p>Create unit tests for your TODO. See the <code class=\"language-text\">TODO</code> as an example. The following resources provide some useful instructions for writing tests:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">TODO</code></pre></div>\n</li>\n</ol>\n<h3 id=\"217-try-some-additional-taito-commands\" style=\"position:relative;\"><a href=\"#217-try-some-additional-taito-commands\" aria-label=\"217 try some additional taito commands permalink\" class=\"autolink-a before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.17. Try some additional taito commands</h3>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">taito <span class=\"token function\">open</span> <span class=\"token function\">git</span>                 <span class=\"token comment\"># Open git repository on browser</span>\ntaito <span class=\"token function\">open</span> project             <span class=\"token comment\"># Open project management on browser</span>\ntaito <span class=\"token function\">open</span> docs                <span class=\"token comment\"># Open project documentation on browser</span>\ntaito <span class=\"token function\">open</span> apidocs             <span class=\"token comment\"># Open generated api documentation on browser</span>\ntaito <span class=\"token function\">open</span> ux                  <span class=\"token comment\"># Open UX guides and layouts on browser</span>\n\ntaito size check:client        <span class=\"token comment\"># Analyze size of the client</span>\ntaito dep check:server        <span class=\"token comment\"># Check dependencies of the server</span>\ntaito code check:server        <span class=\"token comment\"># code check quality ot the server</span>\n\ntaito trouble                  <span class=\"token comment\"># Display troubleshooting</span>\ntaito workspace <span class=\"token function\">kill</span>           <span class=\"token comment\"># Kill all running processes (e.g. containers)</span>\ntaito workspace clean          <span class=\"token comment\"># Remove all unused build artifacts (e.g. images)</span></code></pre></div>\n<h3 id=\"218-read-some-software-design-basics\" style=\"position:relative;\"><a href=\"#218-read-some-software-design-basics\" aria-label=\"218 read some software design basics permalink\" class=\"autolink-a before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.18. Read some software design basics</h3>\n<p>If you did not already, read <a href=\"/taito-cli/tutorial/b-software-design\">Appendix B: Software design</a> for some tips on how to design your application.</p>\n<hr>\n<p><strong>Next:</strong> <a href=\"/taito-cli/tutorial/03-version-control\">3. Version control</a></p>"},"menu":{"edges":[{"node":{"id":"224dd240-60de-521e-9395-86ab4e58cea6","headings":[{"value":"1. Starting a new project"}],"fields":{"slug":"/tutorial/01-starting-a-new-project/"}}},{"node":{"id":"e5ce407d-020a-57e2-b740-1f5fa271fd2b","headings":[{"value":"2. Local development"}],"fields":{"slug":"/tutorial/02-local-development/"}}},{"node":{"id":"56aba0c4-6d15-59a6-8634-596e89bc900c","headings":[{"value":"3. Version control"}],"fields":{"slug":"/tutorial/03-version-control/"}}},{"node":{"id":"46d3f477-da71-53cc-ae74-8c870d8a4f74","headings":[{"value":"4. Project management"}],"fields":{"slug":"/tutorial/04-project-management/"}}},{"node":{"id":"a8f505d2-0d22-5365-b545-c0ab6856200e","headings":[{"value":"5. Remote environments"}],"fields":{"slug":"/tutorial/05-remote-environments/"}}},{"node":{"id":"18319856-0dfa-5803-a67b-94ed8ffc0362","headings":[{"value":"6. Environment variables and secrets"}],"fields":{"slug":"/tutorial/06-env-variables-and-secrets/"}}},{"node":{"id":"87434966-dafe-5d4b-96e6-b209f1e6b6e9","headings":[{"value":"7. Databases and files"}],"fields":{"slug":"/tutorial/07-databases-and-files/"}}},{"node":{"id":"cf1c7d91-3a84-5f5b-932c-0c7376d9abef","headings":[{"value":"8. Cloud services and Terraform"}],"fields":{"slug":"/tutorial/08-cloud-services-and-terraform/"}}},{"node":{"id":"dcbb5383-e698-5bcd-a122-55fa5d6703c2","headings":[{"value":"9. full-stack-template specific details"}],"fields":{"slug":"/tutorial/09-full-stack-template-specific/"}}},{"node":{"id":"b2a0eefd-dba6-51f5-914f-51fb084bc195","headings":[{"value":"10. Production setup"}],"fields":{"slug":"/tutorial/10-production-setup/"}}},{"node":{"id":"dcd69d65-8923-5f83-837b-943fab2c22bb","headings":[{"value":"11. Running in production"}],"fields":{"slug":"/tutorial/11-running-in-production/"}}},{"node":{"id":"b279d99b-25a1-52af-8b96-f3c63b42035f","headings":[{"value":"12. Creating a custom command"}],"fields":{"slug":"/tutorial/12-creating-a-custom-command/"}}},{"node":{"id":"b2081cb5-d594-546f-912a-953513300232","headings":[{"value":"13. Creating a custom plugin"}],"fields":{"slug":"/tutorial/13-creating-a-custom-plugin/"}}},{"node":{"id":"608a03ed-f112-5f92-8686-ad9ec03dddf9","headings":[{"value":"14. Creating a custom template"}],"fields":{"slug":"/tutorial/14-creating-a-custom-template/"}}},{"node":{"id":"e2a8377a-f9af-5b5c-ab01-31ddafffdb00","headings":[{"value":"15. Creating a zone"}],"fields":{"slug":"/tutorial/15-creating-a-zone/"}}},{"node":{"id":"04694546-b262-54d9-82cc-4c8f63707a08","headings":[{"value":"16. Zone maintenance"}],"fields":{"slug":"/tutorial/16-zone-maintenance/"}}},{"node":{"id":"153a0444-b17c-534d-948b-7133e26bcba8","headings":[{"value":"17. Zone monitoring"}],"fields":{"slug":"/tutorial/17-zone-monitoring/"}}},{"node":{"id":"7f549a23-799e-59b0-90e6-f61914b9bb66","headings":[{"value":"18. Zone recovery"}],"fields":{"slug":"/tutorial/18-zone-recovery/"}}},{"node":{"id":"21e6ab12-f1c9-532b-9e83-dd87cc9f852f","headings":[{"value":"APPENDIX A: Technology tutorials"}],"fields":{"slug":"/tutorial/a-technology-tutorials/"}}},{"node":{"id":"a0d631cd-cd95-50c2-b3a8-1ad9ef529ef2","headings":[{"value":"APPENDIX B: Software design"}],"fields":{"slug":"/tutorial/b-software-design/"}}},{"node":{"id":"62de47c9-f476-518a-8cc2-de756c8df361","headings":[{"value":"APPENDIX C: Modern server infrastructure"}],"fields":{"slug":"/tutorial/c-modern-server-infrastructure/"}}},{"node":{"id":"3af7f548-9435-5db8-a874-f86c363dc3c8","headings":[{"value":"APPENDIX D: Security"}],"fields":{"slug":"/tutorial/d-security/"}}},{"node":{"id":"daf70086-8984-58d5-b1d0-41494a85ccbf","headings":[{"value":"APPENDIX E: Data protection and privacy (GDPR)"}],"fields":{"slug":"/tutorial/e-data-protection-and-privacy/"}}}]}},"pageContext":{"id":"e5ce407d-020a-57e2-b740-1f5fa271fd2b"}},"staticQueryHashes":["876164431"]}